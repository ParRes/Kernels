void star1(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=1; i<n-1; i++) {
      OMP_SIMD
      for (int j=1; j<n-1; j++) {
        out[i*n+j] += +in[(i+-1)*n+(j+0)] * -0.5
                      +in[(i+0)*n+(j+-1)] * -0.5
                      +in[(i+0)*n+(j+1)] * 0.5
                      +in[(i+1)*n+(j+0)] * 0.5;
       }
     }
}

void star2(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=2; i<n-2; i++) {
      OMP_SIMD
      for (int j=2; j<n-2; j++) {
        out[i*n+j] += +in[(i+-2)*n+(j+0)] * -0.125
                      +in[(i+-1)*n+(j+0)] * -0.25
                      +in[(i+0)*n+(j+-2)] * -0.125
                      +in[(i+0)*n+(j+-1)] * -0.25
                      +in[(i+0)*n+(j+1)] * 0.25
                      +in[(i+0)*n+(j+2)] * 0.125
                      +in[(i+1)*n+(j+0)] * 0.25
                      +in[(i+2)*n+(j+0)] * 0.125;
       }
     }
}

void star3(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=3; i<n-3; i++) {
      OMP_SIMD
      for (int j=3; j<n-3; j++) {
        out[i*n+j] += +in[(i+-3)*n+(j+0)] * -0.05555555555555555
                      +in[(i+-2)*n+(j+0)] * -0.08333333333333333
                      +in[(i+-1)*n+(j+0)] * -0.16666666666666666
                      +in[(i+0)*n+(j+-3)] * -0.05555555555555555
                      +in[(i+0)*n+(j+-2)] * -0.08333333333333333
                      +in[(i+0)*n+(j+-1)] * -0.16666666666666666
                      +in[(i+0)*n+(j+1)] * 0.16666666666666666
                      +in[(i+0)*n+(j+2)] * 0.08333333333333333
                      +in[(i+0)*n+(j+3)] * 0.05555555555555555
                      +in[(i+1)*n+(j+0)] * 0.16666666666666666
                      +in[(i+2)*n+(j+0)] * 0.08333333333333333
                      +in[(i+3)*n+(j+0)] * 0.05555555555555555;
       }
     }
}

void star4(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=4; i<n-4; i++) {
      OMP_SIMD
      for (int j=4; j<n-4; j++) {
        out[i*n+j] += +in[(i+-4)*n+(j+0)] * -0.03125
                      +in[(i+-3)*n+(j+0)] * -0.041666666666666664
                      +in[(i+-2)*n+(j+0)] * -0.0625
                      +in[(i+-1)*n+(j+0)] * -0.125
                      +in[(i+0)*n+(j+-4)] * -0.03125
                      +in[(i+0)*n+(j+-3)] * -0.041666666666666664
                      +in[(i+0)*n+(j+-2)] * -0.0625
                      +in[(i+0)*n+(j+-1)] * -0.125
                      +in[(i+0)*n+(j+1)] * 0.125
                      +in[(i+0)*n+(j+2)] * 0.0625
                      +in[(i+0)*n+(j+3)] * 0.041666666666666664
                      +in[(i+0)*n+(j+4)] * 0.03125
                      +in[(i+1)*n+(j+0)] * 0.125
                      +in[(i+2)*n+(j+0)] * 0.0625
                      +in[(i+3)*n+(j+0)] * 0.041666666666666664
                      +in[(i+4)*n+(j+0)] * 0.03125;
       }
     }
}

void star5(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=5; i<n-5; i++) {
      OMP_SIMD
      for (int j=5; j<n-5; j++) {
        out[i*n+j] += +in[(i+-5)*n+(j+0)] * -0.02
                      +in[(i+-4)*n+(j+0)] * -0.025
                      +in[(i+-3)*n+(j+0)] * -0.03333333333333333
                      +in[(i+-2)*n+(j+0)] * -0.05
                      +in[(i+-1)*n+(j+0)] * -0.1
                      +in[(i+0)*n+(j+-5)] * -0.02
                      +in[(i+0)*n+(j+-4)] * -0.025
                      +in[(i+0)*n+(j+-3)] * -0.03333333333333333
                      +in[(i+0)*n+(j+-2)] * -0.05
                      +in[(i+0)*n+(j+-1)] * -0.1
                      +in[(i+0)*n+(j+1)] * 0.1
                      +in[(i+0)*n+(j+2)] * 0.05
                      +in[(i+0)*n+(j+3)] * 0.03333333333333333
                      +in[(i+0)*n+(j+4)] * 0.025
                      +in[(i+0)*n+(j+5)] * 0.02
                      +in[(i+1)*n+(j+0)] * 0.1
                      +in[(i+2)*n+(j+0)] * 0.05
                      +in[(i+3)*n+(j+0)] * 0.03333333333333333
                      +in[(i+4)*n+(j+0)] * 0.025
                      +in[(i+5)*n+(j+0)] * 0.02;
       }
     }
}

void star6(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=6; i<n-6; i++) {
      OMP_SIMD
      for (int j=6; j<n-6; j++) {
        out[i*n+j] += +in[(i+-6)*n+(j+0)] * -0.013888888888888888
                      +in[(i+-5)*n+(j+0)] * -0.016666666666666666
                      +in[(i+-4)*n+(j+0)] * -0.020833333333333332
                      +in[(i+-3)*n+(j+0)] * -0.027777777777777776
                      +in[(i+-2)*n+(j+0)] * -0.041666666666666664
                      +in[(i+-1)*n+(j+0)] * -0.08333333333333333
                      +in[(i+0)*n+(j+-6)] * -0.013888888888888888
                      +in[(i+0)*n+(j+-5)] * -0.016666666666666666
                      +in[(i+0)*n+(j+-4)] * -0.020833333333333332
                      +in[(i+0)*n+(j+-3)] * -0.027777777777777776
                      +in[(i+0)*n+(j+-2)] * -0.041666666666666664
                      +in[(i+0)*n+(j+-1)] * -0.08333333333333333
                      +in[(i+0)*n+(j+1)] * 0.08333333333333333
                      +in[(i+0)*n+(j+2)] * 0.041666666666666664
                      +in[(i+0)*n+(j+3)] * 0.027777777777777776
                      +in[(i+0)*n+(j+4)] * 0.020833333333333332
                      +in[(i+0)*n+(j+5)] * 0.016666666666666666
                      +in[(i+0)*n+(j+6)] * 0.013888888888888888
                      +in[(i+1)*n+(j+0)] * 0.08333333333333333
                      +in[(i+2)*n+(j+0)] * 0.041666666666666664
                      +in[(i+3)*n+(j+0)] * 0.027777777777777776
                      +in[(i+4)*n+(j+0)] * 0.020833333333333332
                      +in[(i+5)*n+(j+0)] * 0.016666666666666666
                      +in[(i+6)*n+(j+0)] * 0.013888888888888888;
       }
     }
}

void star7(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=7; i<n-7; i++) {
      OMP_SIMD
      for (int j=7; j<n-7; j++) {
        out[i*n+j] += +in[(i+-7)*n+(j+0)] * -0.01020408163265306
                      +in[(i+-6)*n+(j+0)] * -0.011904761904761904
                      +in[(i+-5)*n+(j+0)] * -0.014285714285714285
                      +in[(i+-4)*n+(j+0)] * -0.017857142857142856
                      +in[(i+-3)*n+(j+0)] * -0.023809523809523808
                      +in[(i+-2)*n+(j+0)] * -0.03571428571428571
                      +in[(i+-1)*n+(j+0)] * -0.07142857142857142
                      +in[(i+0)*n+(j+-7)] * -0.01020408163265306
                      +in[(i+0)*n+(j+-6)] * -0.011904761904761904
                      +in[(i+0)*n+(j+-5)] * -0.014285714285714285
                      +in[(i+0)*n+(j+-4)] * -0.017857142857142856
                      +in[(i+0)*n+(j+-3)] * -0.023809523809523808
                      +in[(i+0)*n+(j+-2)] * -0.03571428571428571
                      +in[(i+0)*n+(j+-1)] * -0.07142857142857142
                      +in[(i+0)*n+(j+1)] * 0.07142857142857142
                      +in[(i+0)*n+(j+2)] * 0.03571428571428571
                      +in[(i+0)*n+(j+3)] * 0.023809523809523808
                      +in[(i+0)*n+(j+4)] * 0.017857142857142856
                      +in[(i+0)*n+(j+5)] * 0.014285714285714285
                      +in[(i+0)*n+(j+6)] * 0.011904761904761904
                      +in[(i+0)*n+(j+7)] * 0.01020408163265306
                      +in[(i+1)*n+(j+0)] * 0.07142857142857142
                      +in[(i+2)*n+(j+0)] * 0.03571428571428571
                      +in[(i+3)*n+(j+0)] * 0.023809523809523808
                      +in[(i+4)*n+(j+0)] * 0.017857142857142856
                      +in[(i+5)*n+(j+0)] * 0.014285714285714285
                      +in[(i+6)*n+(j+0)] * 0.011904761904761904
                      +in[(i+7)*n+(j+0)] * 0.01020408163265306;
       }
     }
}

void star8(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=8; i<n-8; i++) {
      OMP_SIMD
      for (int j=8; j<n-8; j++) {
        out[i*n+j] += +in[(i+-8)*n+(j+0)] * -0.0078125
                      +in[(i+-7)*n+(j+0)] * -0.008928571428571428
                      +in[(i+-6)*n+(j+0)] * -0.010416666666666666
                      +in[(i+-5)*n+(j+0)] * -0.0125
                      +in[(i+-4)*n+(j+0)] * -0.015625
                      +in[(i+-3)*n+(j+0)] * -0.020833333333333332
                      +in[(i+-2)*n+(j+0)] * -0.03125
                      +in[(i+-1)*n+(j+0)] * -0.0625
                      +in[(i+0)*n+(j+-8)] * -0.0078125
                      +in[(i+0)*n+(j+-7)] * -0.008928571428571428
                      +in[(i+0)*n+(j+-6)] * -0.010416666666666666
                      +in[(i+0)*n+(j+-5)] * -0.0125
                      +in[(i+0)*n+(j+-4)] * -0.015625
                      +in[(i+0)*n+(j+-3)] * -0.020833333333333332
                      +in[(i+0)*n+(j+-2)] * -0.03125
                      +in[(i+0)*n+(j+-1)] * -0.0625
                      +in[(i+0)*n+(j+1)] * 0.0625
                      +in[(i+0)*n+(j+2)] * 0.03125
                      +in[(i+0)*n+(j+3)] * 0.020833333333333332
                      +in[(i+0)*n+(j+4)] * 0.015625
                      +in[(i+0)*n+(j+5)] * 0.0125
                      +in[(i+0)*n+(j+6)] * 0.010416666666666666
                      +in[(i+0)*n+(j+7)] * 0.008928571428571428
                      +in[(i+0)*n+(j+8)] * 0.0078125
                      +in[(i+1)*n+(j+0)] * 0.0625
                      +in[(i+2)*n+(j+0)] * 0.03125
                      +in[(i+3)*n+(j+0)] * 0.020833333333333332
                      +in[(i+4)*n+(j+0)] * 0.015625
                      +in[(i+5)*n+(j+0)] * 0.0125
                      +in[(i+6)*n+(j+0)] * 0.010416666666666666
                      +in[(i+7)*n+(j+0)] * 0.008928571428571428
                      +in[(i+8)*n+(j+0)] * 0.0078125;
       }
     }
}

void star9(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=9; i<n-9; i++) {
      OMP_SIMD
      for (int j=9; j<n-9; j++) {
        out[i*n+j] += +in[(i+-9)*n+(j+0)] * -0.006172839506172839
                      +in[(i+-8)*n+(j+0)] * -0.006944444444444444
                      +in[(i+-7)*n+(j+0)] * -0.007936507936507936
                      +in[(i+-6)*n+(j+0)] * -0.009259259259259259
                      +in[(i+-5)*n+(j+0)] * -0.011111111111111112
                      +in[(i+-4)*n+(j+0)] * -0.013888888888888888
                      +in[(i+-3)*n+(j+0)] * -0.018518518518518517
                      +in[(i+-2)*n+(j+0)] * -0.027777777777777776
                      +in[(i+-1)*n+(j+0)] * -0.05555555555555555
                      +in[(i+0)*n+(j+-9)] * -0.006172839506172839
                      +in[(i+0)*n+(j+-8)] * -0.006944444444444444
                      +in[(i+0)*n+(j+-7)] * -0.007936507936507936
                      +in[(i+0)*n+(j+-6)] * -0.009259259259259259
                      +in[(i+0)*n+(j+-5)] * -0.011111111111111112
                      +in[(i+0)*n+(j+-4)] * -0.013888888888888888
                      +in[(i+0)*n+(j+-3)] * -0.018518518518518517
                      +in[(i+0)*n+(j+-2)] * -0.027777777777777776
                      +in[(i+0)*n+(j+-1)] * -0.05555555555555555
                      +in[(i+0)*n+(j+1)] * 0.05555555555555555
                      +in[(i+0)*n+(j+2)] * 0.027777777777777776
                      +in[(i+0)*n+(j+3)] * 0.018518518518518517
                      +in[(i+0)*n+(j+4)] * 0.013888888888888888
                      +in[(i+0)*n+(j+5)] * 0.011111111111111112
                      +in[(i+0)*n+(j+6)] * 0.009259259259259259
                      +in[(i+0)*n+(j+7)] * 0.007936507936507936
                      +in[(i+0)*n+(j+8)] * 0.006944444444444444
                      +in[(i+0)*n+(j+9)] * 0.006172839506172839
                      +in[(i+1)*n+(j+0)] * 0.05555555555555555
                      +in[(i+2)*n+(j+0)] * 0.027777777777777776
                      +in[(i+3)*n+(j+0)] * 0.018518518518518517
                      +in[(i+4)*n+(j+0)] * 0.013888888888888888
                      +in[(i+5)*n+(j+0)] * 0.011111111111111112
                      +in[(i+6)*n+(j+0)] * 0.009259259259259259
                      +in[(i+7)*n+(j+0)] * 0.007936507936507936
                      +in[(i+8)*n+(j+0)] * 0.006944444444444444
                      +in[(i+9)*n+(j+0)] * 0.006172839506172839;
       }
     }
}

void grid1(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=1; i<n-1; i++) {
      OMP_SIMD
      for (int j=1; j<n-1; j++) {
        out[i*n+j] += +in[(i+-1)*n+(j+-1)] * -0.25
                      +in[(i+-1)*n+(j+0)] * -0.25
                      +in[(i+0)*n+(j+-1)] * -0.25
                      +in[(i+0)*n+(j+1)] * 0.25
                      +in[(i+1)*n+(j+0)] * 0.25
                      +in[(i+1)*n+(j+1)] * 0.25
                      ;
       }
     }
}

void grid2(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=2; i<n-2; i++) {
      OMP_SIMD
      for (int j=2; j<n-2; j++) {
        out[i*n+j] += +in[(i+-2)*n+(j+-2)] * -0.0625
                      +in[(i+-2)*n+(j+-1)] * -0.020833333333333332
                      +in[(i+-2)*n+(j+0)] * -0.020833333333333332
                      +in[(i+-2)*n+(j+1)] * -0.020833333333333332
                      +in[(i+-1)*n+(j+-2)] * -0.020833333333333332
                      +in[(i+-1)*n+(j+-1)] * -0.125
                      +in[(i+-1)*n+(j+0)] * -0.125
                      +in[(i+-1)*n+(j+2)] * 0.020833333333333332
                      +in[(i+0)*n+(j+-2)] * -0.020833333333333332
                      +in[(i+0)*n+(j+-1)] * -0.125
                      +in[(i+0)*n+(j+1)] * 0.125
                      +in[(i+0)*n+(j+2)] * 0.020833333333333332
                      +in[(i+1)*n+(j+-2)] * -0.020833333333333332
                      +in[(i+1)*n+(j+0)] * 0.125
                      +in[(i+1)*n+(j+1)] * 0.125
                      +in[(i+1)*n+(j+2)] * 0.020833333333333332
                      +in[(i+2)*n+(j+-1)] * 0.020833333333333332
                      +in[(i+2)*n+(j+0)] * 0.020833333333333332
                      +in[(i+2)*n+(j+1)] * 0.020833333333333332
                      +in[(i+2)*n+(j+2)] * 0.0625
                      ;
       }
     }
}

void grid3(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=3; i<n-3; i++) {
      OMP_SIMD
      for (int j=3; j<n-3; j++) {
        out[i*n+j] += +in[(i+-3)*n+(j+-3)] * -0.027777777777777776
                      +in[(i+-3)*n+(j+-2)] * -0.005555555555555556
                      +in[(i+-3)*n+(j+-1)] * -0.005555555555555556
                      +in[(i+-3)*n+(j+0)] * -0.005555555555555556
                      +in[(i+-3)*n+(j+1)] * -0.005555555555555556
                      +in[(i+-3)*n+(j+2)] * -0.005555555555555556
                      +in[(i+-2)*n+(j+-3)] * -0.005555555555555556
                      +in[(i+-2)*n+(j+-2)] * -0.041666666666666664
                      +in[(i+-2)*n+(j+-1)] * -0.013888888888888888
                      +in[(i+-2)*n+(j+0)] * -0.013888888888888888
                      +in[(i+-2)*n+(j+1)] * -0.013888888888888888
                      +in[(i+-2)*n+(j+3)] * 0.005555555555555556
                      +in[(i+-1)*n+(j+-3)] * -0.005555555555555556
                      +in[(i+-1)*n+(j+-2)] * -0.013888888888888888
                      +in[(i+-1)*n+(j+-1)] * -0.08333333333333333
                      +in[(i+-1)*n+(j+0)] * -0.08333333333333333
                      +in[(i+-1)*n+(j+2)] * 0.013888888888888888
                      +in[(i+-1)*n+(j+3)] * 0.005555555555555556
                      +in[(i+0)*n+(j+-3)] * -0.005555555555555556
                      +in[(i+0)*n+(j+-2)] * -0.013888888888888888
                      +in[(i+0)*n+(j+-1)] * -0.08333333333333333
                      +in[(i+0)*n+(j+1)] * 0.08333333333333333
                      +in[(i+0)*n+(j+2)] * 0.013888888888888888
                      +in[(i+0)*n+(j+3)] * 0.005555555555555556
                      +in[(i+1)*n+(j+-3)] * -0.005555555555555556
                      +in[(i+1)*n+(j+-2)] * -0.013888888888888888
                      +in[(i+1)*n+(j+0)] * 0.08333333333333333
                      +in[(i+1)*n+(j+1)] * 0.08333333333333333
                      +in[(i+1)*n+(j+2)] * 0.013888888888888888
                      +in[(i+1)*n+(j+3)] * 0.005555555555555556
                      +in[(i+2)*n+(j+-3)] * -0.005555555555555556
                      +in[(i+2)*n+(j+-1)] * 0.013888888888888888
                      +in[(i+2)*n+(j+0)] * 0.013888888888888888
                      +in[(i+2)*n+(j+1)] * 0.013888888888888888
                      +in[(i+2)*n+(j+2)] * 0.041666666666666664
                      +in[(i+2)*n+(j+3)] * 0.005555555555555556
                      +in[(i+3)*n+(j+-2)] * 0.005555555555555556
                      +in[(i+3)*n+(j+-1)] * 0.005555555555555556
                      +in[(i+3)*n+(j+0)] * 0.005555555555555556
                      +in[(i+3)*n+(j+1)] * 0.005555555555555556
                      +in[(i+3)*n+(j+2)] * 0.005555555555555556
                      +in[(i+3)*n+(j+3)] * 0.027777777777777776
                      ;
       }
     }
}

void grid4(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=4; i<n-4; i++) {
      OMP_SIMD
      for (int j=4; j<n-4; j++) {
        out[i*n+j] += +in[(i+-4)*n+(j+-4)] * -0.015625
                      +in[(i+-4)*n+(j+-3)] * -0.002232142857142857
                      +in[(i+-4)*n+(j+-2)] * -0.002232142857142857
                      +in[(i+-4)*n+(j+-1)] * -0.002232142857142857
                      +in[(i+-4)*n+(j+0)] * -0.002232142857142857
                      +in[(i+-4)*n+(j+1)] * -0.002232142857142857
                      +in[(i+-4)*n+(j+2)] * -0.002232142857142857
                      +in[(i+-4)*n+(j+3)] * -0.002232142857142857
                      +in[(i+-3)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+-3)*n+(j+-3)] * -0.020833333333333332
                      +in[(i+-3)*n+(j+-2)] * -0.004166666666666667
                      +in[(i+-3)*n+(j+-1)] * -0.004166666666666667
                      +in[(i+-3)*n+(j+0)] * -0.004166666666666667
                      +in[(i+-3)*n+(j+1)] * -0.004166666666666667
                      +in[(i+-3)*n+(j+2)] * -0.004166666666666667
                      +in[(i+-3)*n+(j+4)] * 0.002232142857142857
                      +in[(i+-2)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+-2)*n+(j+-3)] * -0.004166666666666667
                      +in[(i+-2)*n+(j+-2)] * -0.03125
                      +in[(i+-2)*n+(j+-1)] * -0.010416666666666666
                      +in[(i+-2)*n+(j+0)] * -0.010416666666666666
                      +in[(i+-2)*n+(j+1)] * -0.010416666666666666
                      +in[(i+-2)*n+(j+3)] * 0.004166666666666667
                      +in[(i+-2)*n+(j+4)] * 0.002232142857142857
                      +in[(i+-1)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+-1)*n+(j+-3)] * -0.004166666666666667
                      +in[(i+-1)*n+(j+-2)] * -0.010416666666666666
                      +in[(i+-1)*n+(j+-1)] * -0.0625
                      +in[(i+-1)*n+(j+0)] * -0.0625
                      +in[(i+-1)*n+(j+2)] * 0.010416666666666666
                      +in[(i+-1)*n+(j+3)] * 0.004166666666666667
                      +in[(i+-1)*n+(j+4)] * 0.002232142857142857
                      +in[(i+0)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+0)*n+(j+-3)] * -0.004166666666666667
                      +in[(i+0)*n+(j+-2)] * -0.010416666666666666
                      +in[(i+0)*n+(j+-1)] * -0.0625
                      +in[(i+0)*n+(j+1)] * 0.0625
                      +in[(i+0)*n+(j+2)] * 0.010416666666666666
                      +in[(i+0)*n+(j+3)] * 0.004166666666666667
                      +in[(i+0)*n+(j+4)] * 0.002232142857142857
                      +in[(i+1)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+1)*n+(j+-3)] * -0.004166666666666667
                      +in[(i+1)*n+(j+-2)] * -0.010416666666666666
                      +in[(i+1)*n+(j+0)] * 0.0625
                      +in[(i+1)*n+(j+1)] * 0.0625
                      +in[(i+1)*n+(j+2)] * 0.010416666666666666
                      +in[(i+1)*n+(j+3)] * 0.004166666666666667
                      +in[(i+1)*n+(j+4)] * 0.002232142857142857
                      +in[(i+2)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+2)*n+(j+-3)] * -0.004166666666666667
                      +in[(i+2)*n+(j+-1)] * 0.010416666666666666
                      +in[(i+2)*n+(j+0)] * 0.010416666666666666
                      +in[(i+2)*n+(j+1)] * 0.010416666666666666
                      +in[(i+2)*n+(j+2)] * 0.03125
                      +in[(i+2)*n+(j+3)] * 0.004166666666666667
                      +in[(i+2)*n+(j+4)] * 0.002232142857142857
                      +in[(i+3)*n+(j+-4)] * -0.002232142857142857
                      +in[(i+3)*n+(j+-2)] * 0.004166666666666667
                      +in[(i+3)*n+(j+-1)] * 0.004166666666666667
                      +in[(i+3)*n+(j+0)] * 0.004166666666666667
                      +in[(i+3)*n+(j+1)] * 0.004166666666666667
                      +in[(i+3)*n+(j+2)] * 0.004166666666666667
                      +in[(i+3)*n+(j+3)] * 0.020833333333333332
                      +in[(i+3)*n+(j+4)] * 0.002232142857142857
                      +in[(i+4)*n+(j+-3)] * 0.002232142857142857
                      +in[(i+4)*n+(j+-2)] * 0.002232142857142857
                      +in[(i+4)*n+(j+-1)] * 0.002232142857142857
                      +in[(i+4)*n+(j+0)] * 0.002232142857142857
                      +in[(i+4)*n+(j+1)] * 0.002232142857142857
                      +in[(i+4)*n+(j+2)] * 0.002232142857142857
                      +in[(i+4)*n+(j+3)] * 0.002232142857142857
                      +in[(i+4)*n+(j+4)] * 0.015625
                      ;
       }
     }
}

void grid5(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=5; i<n-5; i++) {
      OMP_SIMD
      for (int j=5; j<n-5; j++) {
        out[i*n+j] += +in[(i+-5)*n+(j+-5)] * -0.01
                      +in[(i+-5)*n+(j+-4)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+-3)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+-2)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+-1)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+0)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+1)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+2)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+3)] * -0.0011111111111111111
                      +in[(i+-5)*n+(j+4)] * -0.0011111111111111111
                      +in[(i+-4)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+-4)*n+(j+-4)] * -0.0125
                      +in[(i+-4)*n+(j+-3)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+-2)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+-1)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+0)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+1)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+2)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+3)] * -0.0017857142857142857
                      +in[(i+-4)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+-3)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+-3)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+-3)*n+(j+-3)] * -0.016666666666666666
                      +in[(i+-3)*n+(j+-2)] * -0.0033333333333333335
                      +in[(i+-3)*n+(j+-1)] * -0.0033333333333333335
                      +in[(i+-3)*n+(j+0)] * -0.0033333333333333335
                      +in[(i+-3)*n+(j+1)] * -0.0033333333333333335
                      +in[(i+-3)*n+(j+2)] * -0.0033333333333333335
                      +in[(i+-3)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+-3)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+-2)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+-2)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+-2)*n+(j+-3)] * -0.0033333333333333335
                      +in[(i+-2)*n+(j+-2)] * -0.025
                      +in[(i+-2)*n+(j+-1)] * -0.008333333333333333
                      +in[(i+-2)*n+(j+0)] * -0.008333333333333333
                      +in[(i+-2)*n+(j+1)] * -0.008333333333333333
                      +in[(i+-2)*n+(j+3)] * 0.0033333333333333335
                      +in[(i+-2)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+-2)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+-1)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+-1)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+-1)*n+(j+-3)] * -0.0033333333333333335
                      +in[(i+-1)*n+(j+-2)] * -0.008333333333333333
                      +in[(i+-1)*n+(j+-1)] * -0.05
                      +in[(i+-1)*n+(j+0)] * -0.05
                      +in[(i+-1)*n+(j+2)] * 0.008333333333333333
                      +in[(i+-1)*n+(j+3)] * 0.0033333333333333335
                      +in[(i+-1)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+-1)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+0)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+0)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+0)*n+(j+-3)] * -0.0033333333333333335
                      +in[(i+0)*n+(j+-2)] * -0.008333333333333333
                      +in[(i+0)*n+(j+-1)] * -0.05
                      +in[(i+0)*n+(j+1)] * 0.05
                      +in[(i+0)*n+(j+2)] * 0.008333333333333333
                      +in[(i+0)*n+(j+3)] * 0.0033333333333333335
                      +in[(i+0)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+0)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+1)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+1)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+1)*n+(j+-3)] * -0.0033333333333333335
                      +in[(i+1)*n+(j+-2)] * -0.008333333333333333
                      +in[(i+1)*n+(j+0)] * 0.05
                      +in[(i+1)*n+(j+1)] * 0.05
                      +in[(i+1)*n+(j+2)] * 0.008333333333333333
                      +in[(i+1)*n+(j+3)] * 0.0033333333333333335
                      +in[(i+1)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+1)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+2)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+2)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+2)*n+(j+-3)] * -0.0033333333333333335
                      +in[(i+2)*n+(j+-1)] * 0.008333333333333333
                      +in[(i+2)*n+(j+0)] * 0.008333333333333333
                      +in[(i+2)*n+(j+1)] * 0.008333333333333333
                      +in[(i+2)*n+(j+2)] * 0.025
                      +in[(i+2)*n+(j+3)] * 0.0033333333333333335
                      +in[(i+2)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+2)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+3)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+3)*n+(j+-4)] * -0.0017857142857142857
                      +in[(i+3)*n+(j+-2)] * 0.0033333333333333335
                      +in[(i+3)*n+(j+-1)] * 0.0033333333333333335
                      +in[(i+3)*n+(j+0)] * 0.0033333333333333335
                      +in[(i+3)*n+(j+1)] * 0.0033333333333333335
                      +in[(i+3)*n+(j+2)] * 0.0033333333333333335
                      +in[(i+3)*n+(j+3)] * 0.016666666666666666
                      +in[(i+3)*n+(j+4)] * 0.0017857142857142857
                      +in[(i+3)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+4)*n+(j+-5)] * -0.0011111111111111111
                      +in[(i+4)*n+(j+-3)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+-2)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+-1)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+0)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+1)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+2)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+3)] * 0.0017857142857142857
                      +in[(i+4)*n+(j+4)] * 0.0125
                      +in[(i+4)*n+(j+5)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+-4)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+-3)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+-2)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+-1)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+0)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+1)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+2)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+3)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+4)] * 0.0011111111111111111
                      +in[(i+5)*n+(j+5)] * 0.01
                      ;
       }
     }
}

void grid6(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=6; i<n-6; i++) {
      OMP_SIMD
      for (int j=6; j<n-6; j++) {
        out[i*n+j] += +in[(i+-6)*n+(j+-6)] * -0.006944444444444444
                      +in[(i+-6)*n+(j+-5)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+-4)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+-3)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+-2)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+-1)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+0)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+1)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+2)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+3)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+4)] * -0.0006313131313131314
                      +in[(i+-6)*n+(j+5)] * -0.0006313131313131314
                      +in[(i+-5)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+-5)*n+(j+-5)] * -0.008333333333333333
                      +in[(i+-5)*n+(j+-4)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+-3)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+-2)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+-1)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+0)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+1)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+2)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+3)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+4)] * -0.000925925925925926
                      +in[(i+-5)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+-4)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+-4)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+-4)*n+(j+-4)] * -0.010416666666666666
                      +in[(i+-4)*n+(j+-3)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+-2)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+-1)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+0)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+1)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+2)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+3)] * -0.001488095238095238
                      +in[(i+-4)*n+(j+5)] * 0.000925925925925926
                      +in[(i+-4)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+-3)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+-3)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+-3)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+-3)*n+(j+-3)] * -0.013888888888888888
                      +in[(i+-3)*n+(j+-2)] * -0.002777777777777778
                      +in[(i+-3)*n+(j+-1)] * -0.002777777777777778
                      +in[(i+-3)*n+(j+0)] * -0.002777777777777778
                      +in[(i+-3)*n+(j+1)] * -0.002777777777777778
                      +in[(i+-3)*n+(j+2)] * -0.002777777777777778
                      +in[(i+-3)*n+(j+4)] * 0.001488095238095238
                      +in[(i+-3)*n+(j+5)] * 0.000925925925925926
                      +in[(i+-3)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+-2)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+-2)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+-2)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+-2)*n+(j+-3)] * -0.002777777777777778
                      +in[(i+-2)*n+(j+-2)] * -0.020833333333333332
                      +in[(i+-2)*n+(j+-1)] * -0.006944444444444444
                      +in[(i+-2)*n+(j+0)] * -0.006944444444444444
                      +in[(i+-2)*n+(j+1)] * -0.006944444444444444
                      +in[(i+-2)*n+(j+3)] * 0.002777777777777778
                      +in[(i+-2)*n+(j+4)] * 0.001488095238095238
                      +in[(i+-2)*n+(j+5)] * 0.000925925925925926
                      +in[(i+-2)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+-1)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+-1)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+-1)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+-1)*n+(j+-3)] * -0.002777777777777778
                      +in[(i+-1)*n+(j+-2)] * -0.006944444444444444
                      +in[(i+-1)*n+(j+-1)] * -0.041666666666666664
                      +in[(i+-1)*n+(j+0)] * -0.041666666666666664
                      +in[(i+-1)*n+(j+2)] * 0.006944444444444444
                      +in[(i+-1)*n+(j+3)] * 0.002777777777777778
                      +in[(i+-1)*n+(j+4)] * 0.001488095238095238
                      +in[(i+-1)*n+(j+5)] * 0.000925925925925926
                      +in[(i+-1)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+0)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+0)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+0)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+0)*n+(j+-3)] * -0.002777777777777778
                      +in[(i+0)*n+(j+-2)] * -0.006944444444444444
                      +in[(i+0)*n+(j+-1)] * -0.041666666666666664
                      +in[(i+0)*n+(j+1)] * 0.041666666666666664
                      +in[(i+0)*n+(j+2)] * 0.006944444444444444
                      +in[(i+0)*n+(j+3)] * 0.002777777777777778
                      +in[(i+0)*n+(j+4)] * 0.001488095238095238
                      +in[(i+0)*n+(j+5)] * 0.000925925925925926
                      +in[(i+0)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+1)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+1)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+1)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+1)*n+(j+-3)] * -0.002777777777777778
                      +in[(i+1)*n+(j+-2)] * -0.006944444444444444
                      +in[(i+1)*n+(j+0)] * 0.041666666666666664
                      +in[(i+1)*n+(j+1)] * 0.041666666666666664
                      +in[(i+1)*n+(j+2)] * 0.006944444444444444
                      +in[(i+1)*n+(j+3)] * 0.002777777777777778
                      +in[(i+1)*n+(j+4)] * 0.001488095238095238
                      +in[(i+1)*n+(j+5)] * 0.000925925925925926
                      +in[(i+1)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+2)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+2)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+2)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+2)*n+(j+-3)] * -0.002777777777777778
                      +in[(i+2)*n+(j+-1)] * 0.006944444444444444
                      +in[(i+2)*n+(j+0)] * 0.006944444444444444
                      +in[(i+2)*n+(j+1)] * 0.006944444444444444
                      +in[(i+2)*n+(j+2)] * 0.020833333333333332
                      +in[(i+2)*n+(j+3)] * 0.002777777777777778
                      +in[(i+2)*n+(j+4)] * 0.001488095238095238
                      +in[(i+2)*n+(j+5)] * 0.000925925925925926
                      +in[(i+2)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+3)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+3)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+3)*n+(j+-4)] * -0.001488095238095238
                      +in[(i+3)*n+(j+-2)] * 0.002777777777777778
                      +in[(i+3)*n+(j+-1)] * 0.002777777777777778
                      +in[(i+3)*n+(j+0)] * 0.002777777777777778
                      +in[(i+3)*n+(j+1)] * 0.002777777777777778
                      +in[(i+3)*n+(j+2)] * 0.002777777777777778
                      +in[(i+3)*n+(j+3)] * 0.013888888888888888
                      +in[(i+3)*n+(j+4)] * 0.001488095238095238
                      +in[(i+3)*n+(j+5)] * 0.000925925925925926
                      +in[(i+3)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+4)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+4)*n+(j+-5)] * -0.000925925925925926
                      +in[(i+4)*n+(j+-3)] * 0.001488095238095238
                      +in[(i+4)*n+(j+-2)] * 0.001488095238095238
                      +in[(i+4)*n+(j+-1)] * 0.001488095238095238
                      +in[(i+4)*n+(j+0)] * 0.001488095238095238
                      +in[(i+4)*n+(j+1)] * 0.001488095238095238
                      +in[(i+4)*n+(j+2)] * 0.001488095238095238
                      +in[(i+4)*n+(j+3)] * 0.001488095238095238
                      +in[(i+4)*n+(j+4)] * 0.010416666666666666
                      +in[(i+4)*n+(j+5)] * 0.000925925925925926
                      +in[(i+4)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+5)*n+(j+-6)] * -0.0006313131313131314
                      +in[(i+5)*n+(j+-4)] * 0.000925925925925926
                      +in[(i+5)*n+(j+-3)] * 0.000925925925925926
                      +in[(i+5)*n+(j+-2)] * 0.000925925925925926
                      +in[(i+5)*n+(j+-1)] * 0.000925925925925926
                      +in[(i+5)*n+(j+0)] * 0.000925925925925926
                      +in[(i+5)*n+(j+1)] * 0.000925925925925926
                      +in[(i+5)*n+(j+2)] * 0.000925925925925926
                      +in[(i+5)*n+(j+3)] * 0.000925925925925926
                      +in[(i+5)*n+(j+4)] * 0.000925925925925926
                      +in[(i+5)*n+(j+5)] * 0.008333333333333333
                      +in[(i+5)*n+(j+6)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+-5)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+-4)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+-3)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+-2)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+-1)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+0)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+1)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+2)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+3)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+4)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+5)] * 0.0006313131313131314
                      +in[(i+6)*n+(j+6)] * 0.006944444444444444
                      ;
       }
     }
}

void grid7(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=7; i<n-7; i++) {
      OMP_SIMD
      for (int j=7; j<n-7; j++) {
        out[i*n+j] += +in[(i+-7)*n+(j+-7)] * -0.00510204081632653
                      +in[(i+-7)*n+(j+-6)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+-5)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+-4)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+-3)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+-2)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+-1)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+0)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+1)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+2)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+3)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+4)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+5)] * -0.0003924646781789639
                      +in[(i+-7)*n+(j+6)] * -0.0003924646781789639
                      +in[(i+-6)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+-6)*n+(j+-6)] * -0.005952380952380952
                      +in[(i+-6)*n+(j+-5)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+-4)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+-3)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+-2)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+-1)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+0)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+1)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+2)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+3)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+4)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+5)] * -0.0005411255411255411
                      +in[(i+-6)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+-5)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+-5)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+-5)*n+(j+-5)] * -0.007142857142857143
                      +in[(i+-5)*n+(j+-4)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+-3)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+-2)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+-1)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+0)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+1)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+2)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+3)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+4)] * -0.0007936507936507937
                      +in[(i+-5)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+-5)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+-4)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+-4)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+-4)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+-4)*n+(j+-4)] * -0.008928571428571428
                      +in[(i+-4)*n+(j+-3)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+-2)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+-1)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+0)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+1)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+2)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+3)] * -0.0012755102040816326
                      +in[(i+-4)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+-4)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+-4)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+-3)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+-3)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+-3)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+-3)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+-3)*n+(j+-3)] * -0.011904761904761904
                      +in[(i+-3)*n+(j+-2)] * -0.002380952380952381
                      +in[(i+-3)*n+(j+-1)] * -0.002380952380952381
                      +in[(i+-3)*n+(j+0)] * -0.002380952380952381
                      +in[(i+-3)*n+(j+1)] * -0.002380952380952381
                      +in[(i+-3)*n+(j+2)] * -0.002380952380952381
                      +in[(i+-3)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+-3)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+-3)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+-3)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+-2)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+-2)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+-2)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+-2)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+-2)*n+(j+-3)] * -0.002380952380952381
                      +in[(i+-2)*n+(j+-2)] * -0.017857142857142856
                      +in[(i+-2)*n+(j+-1)] * -0.005952380952380952
                      +in[(i+-2)*n+(j+0)] * -0.005952380952380952
                      +in[(i+-2)*n+(j+1)] * -0.005952380952380952
                      +in[(i+-2)*n+(j+3)] * 0.002380952380952381
                      +in[(i+-2)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+-2)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+-2)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+-2)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+-1)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+-1)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+-1)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+-1)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+-1)*n+(j+-3)] * -0.002380952380952381
                      +in[(i+-1)*n+(j+-2)] * -0.005952380952380952
                      +in[(i+-1)*n+(j+-1)] * -0.03571428571428571
                      +in[(i+-1)*n+(j+0)] * -0.03571428571428571
                      +in[(i+-1)*n+(j+2)] * 0.005952380952380952
                      +in[(i+-1)*n+(j+3)] * 0.002380952380952381
                      +in[(i+-1)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+-1)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+-1)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+-1)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+0)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+0)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+0)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+0)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+0)*n+(j+-3)] * -0.002380952380952381
                      +in[(i+0)*n+(j+-2)] * -0.005952380952380952
                      +in[(i+0)*n+(j+-1)] * -0.03571428571428571
                      +in[(i+0)*n+(j+1)] * 0.03571428571428571
                      +in[(i+0)*n+(j+2)] * 0.005952380952380952
                      +in[(i+0)*n+(j+3)] * 0.002380952380952381
                      +in[(i+0)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+0)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+0)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+0)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+1)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+1)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+1)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+1)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+1)*n+(j+-3)] * -0.002380952380952381
                      +in[(i+1)*n+(j+-2)] * -0.005952380952380952
                      +in[(i+1)*n+(j+0)] * 0.03571428571428571
                      +in[(i+1)*n+(j+1)] * 0.03571428571428571
                      +in[(i+1)*n+(j+2)] * 0.005952380952380952
                      +in[(i+1)*n+(j+3)] * 0.002380952380952381
                      +in[(i+1)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+1)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+1)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+1)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+2)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+2)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+2)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+2)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+2)*n+(j+-3)] * -0.002380952380952381
                      +in[(i+2)*n+(j+-1)] * 0.005952380952380952
                      +in[(i+2)*n+(j+0)] * 0.005952380952380952
                      +in[(i+2)*n+(j+1)] * 0.005952380952380952
                      +in[(i+2)*n+(j+2)] * 0.017857142857142856
                      +in[(i+2)*n+(j+3)] * 0.002380952380952381
                      +in[(i+2)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+2)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+2)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+2)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+3)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+3)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+3)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+3)*n+(j+-4)] * -0.0012755102040816326
                      +in[(i+3)*n+(j+-2)] * 0.002380952380952381
                      +in[(i+3)*n+(j+-1)] * 0.002380952380952381
                      +in[(i+3)*n+(j+0)] * 0.002380952380952381
                      +in[(i+3)*n+(j+1)] * 0.002380952380952381
                      +in[(i+3)*n+(j+2)] * 0.002380952380952381
                      +in[(i+3)*n+(j+3)] * 0.011904761904761904
                      +in[(i+3)*n+(j+4)] * 0.0012755102040816326
                      +in[(i+3)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+3)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+3)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+4)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+4)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+4)*n+(j+-5)] * -0.0007936507936507937
                      +in[(i+4)*n+(j+-3)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+-2)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+-1)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+0)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+1)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+2)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+3)] * 0.0012755102040816326
                      +in[(i+4)*n+(j+4)] * 0.008928571428571428
                      +in[(i+4)*n+(j+5)] * 0.0007936507936507937
                      +in[(i+4)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+4)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+5)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+5)*n+(j+-6)] * -0.0005411255411255411
                      +in[(i+5)*n+(j+-4)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+-3)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+-2)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+-1)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+0)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+1)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+2)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+3)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+4)] * 0.0007936507936507937
                      +in[(i+5)*n+(j+5)] * 0.007142857142857143
                      +in[(i+5)*n+(j+6)] * 0.0005411255411255411
                      +in[(i+5)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+6)*n+(j+-7)] * -0.0003924646781789639
                      +in[(i+6)*n+(j+-5)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+-4)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+-3)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+-2)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+-1)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+0)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+1)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+2)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+3)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+4)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+5)] * 0.0005411255411255411
                      +in[(i+6)*n+(j+6)] * 0.005952380952380952
                      +in[(i+6)*n+(j+7)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+-6)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+-5)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+-4)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+-3)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+-2)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+-1)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+0)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+1)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+2)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+3)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+4)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+5)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+6)] * 0.0003924646781789639
                      +in[(i+7)*n+(j+7)] * 0.00510204081632653
                      ;
       }
     }
}

void grid8(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=8; i<n-8; i++) {
      OMP_SIMD
      for (int j=8; j<n-8; j++) {
        out[i*n+j] += +in[(i+-8)*n+(j+-8)] * -0.00390625
                      +in[(i+-8)*n+(j+-7)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+-6)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+-5)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+-4)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+-3)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+-2)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+-1)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+0)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+1)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+2)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+3)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+4)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+5)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+6)] * -0.00026041666666666666
                      +in[(i+-8)*n+(j+7)] * -0.00026041666666666666
                      +in[(i+-7)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-7)*n+(j+-7)] * -0.004464285714285714
                      +in[(i+-7)*n+(j+-6)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+-5)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+-4)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+-3)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+-2)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+-1)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+0)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+1)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+2)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+3)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+4)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+5)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+6)] * -0.00034340659340659343
                      +in[(i+-7)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+-6)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-6)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+-6)*n+(j+-6)] * -0.005208333333333333
                      +in[(i+-6)*n+(j+-5)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+-4)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+-3)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+-2)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+-1)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+0)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+1)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+2)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+3)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+4)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+5)] * -0.0004734848484848485
                      +in[(i+-6)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+-6)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+-5)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-5)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+-5)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+-5)*n+(j+-5)] * -0.00625
                      +in[(i+-5)*n+(j+-4)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+-3)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+-2)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+-1)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+0)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+1)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+2)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+3)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+4)] * -0.0006944444444444445
                      +in[(i+-5)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+-5)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+-5)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+-4)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-4)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+-4)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+-4)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+-4)*n+(j+-4)] * -0.0078125
                      +in[(i+-4)*n+(j+-3)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+-2)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+-1)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+0)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+1)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+2)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+3)] * -0.0011160714285714285
                      +in[(i+-4)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+-4)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+-4)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+-4)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+-3)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-3)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+-3)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+-3)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+-3)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+-3)*n+(j+-3)] * -0.010416666666666666
                      +in[(i+-3)*n+(j+-2)] * -0.0020833333333333333
                      +in[(i+-3)*n+(j+-1)] * -0.0020833333333333333
                      +in[(i+-3)*n+(j+0)] * -0.0020833333333333333
                      +in[(i+-3)*n+(j+1)] * -0.0020833333333333333
                      +in[(i+-3)*n+(j+2)] * -0.0020833333333333333
                      +in[(i+-3)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+-3)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+-3)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+-3)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+-3)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+-2)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-2)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+-2)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+-2)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+-2)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+-2)*n+(j+-3)] * -0.0020833333333333333
                      +in[(i+-2)*n+(j+-2)] * -0.015625
                      +in[(i+-2)*n+(j+-1)] * -0.005208333333333333
                      +in[(i+-2)*n+(j+0)] * -0.005208333333333333
                      +in[(i+-2)*n+(j+1)] * -0.005208333333333333
                      +in[(i+-2)*n+(j+3)] * 0.0020833333333333333
                      +in[(i+-2)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+-2)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+-2)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+-2)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+-2)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+-1)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+-1)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+-1)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+-1)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+-1)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+-1)*n+(j+-3)] * -0.0020833333333333333
                      +in[(i+-1)*n+(j+-2)] * -0.005208333333333333
                      +in[(i+-1)*n+(j+-1)] * -0.03125
                      +in[(i+-1)*n+(j+0)] * -0.03125
                      +in[(i+-1)*n+(j+2)] * 0.005208333333333333
                      +in[(i+-1)*n+(j+3)] * 0.0020833333333333333
                      +in[(i+-1)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+-1)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+-1)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+-1)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+-1)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+0)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+0)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+0)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+0)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+0)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+0)*n+(j+-3)] * -0.0020833333333333333
                      +in[(i+0)*n+(j+-2)] * -0.005208333333333333
                      +in[(i+0)*n+(j+-1)] * -0.03125
                      +in[(i+0)*n+(j+1)] * 0.03125
                      +in[(i+0)*n+(j+2)] * 0.005208333333333333
                      +in[(i+0)*n+(j+3)] * 0.0020833333333333333
                      +in[(i+0)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+0)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+0)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+0)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+0)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+1)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+1)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+1)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+1)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+1)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+1)*n+(j+-3)] * -0.0020833333333333333
                      +in[(i+1)*n+(j+-2)] * -0.005208333333333333
                      +in[(i+1)*n+(j+0)] * 0.03125
                      +in[(i+1)*n+(j+1)] * 0.03125
                      +in[(i+1)*n+(j+2)] * 0.005208333333333333
                      +in[(i+1)*n+(j+3)] * 0.0020833333333333333
                      +in[(i+1)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+1)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+1)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+1)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+1)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+2)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+2)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+2)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+2)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+2)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+2)*n+(j+-3)] * -0.0020833333333333333
                      +in[(i+2)*n+(j+-1)] * 0.005208333333333333
                      +in[(i+2)*n+(j+0)] * 0.005208333333333333
                      +in[(i+2)*n+(j+1)] * 0.005208333333333333
                      +in[(i+2)*n+(j+2)] * 0.015625
                      +in[(i+2)*n+(j+3)] * 0.0020833333333333333
                      +in[(i+2)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+2)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+2)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+2)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+2)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+3)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+3)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+3)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+3)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+3)*n+(j+-4)] * -0.0011160714285714285
                      +in[(i+3)*n+(j+-2)] * 0.0020833333333333333
                      +in[(i+3)*n+(j+-1)] * 0.0020833333333333333
                      +in[(i+3)*n+(j+0)] * 0.0020833333333333333
                      +in[(i+3)*n+(j+1)] * 0.0020833333333333333
                      +in[(i+3)*n+(j+2)] * 0.0020833333333333333
                      +in[(i+3)*n+(j+3)] * 0.010416666666666666
                      +in[(i+3)*n+(j+4)] * 0.0011160714285714285
                      +in[(i+3)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+3)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+3)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+3)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+4)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+4)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+4)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+4)*n+(j+-5)] * -0.0006944444444444445
                      +in[(i+4)*n+(j+-3)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+-2)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+-1)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+0)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+1)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+2)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+3)] * 0.0011160714285714285
                      +in[(i+4)*n+(j+4)] * 0.0078125
                      +in[(i+4)*n+(j+5)] * 0.0006944444444444445
                      +in[(i+4)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+4)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+4)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+5)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+5)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+5)*n+(j+-6)] * -0.0004734848484848485
                      +in[(i+5)*n+(j+-4)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+-3)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+-2)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+-1)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+0)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+1)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+2)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+3)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+4)] * 0.0006944444444444445
                      +in[(i+5)*n+(j+5)] * 0.00625
                      +in[(i+5)*n+(j+6)] * 0.0004734848484848485
                      +in[(i+5)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+5)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+6)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+6)*n+(j+-7)] * -0.00034340659340659343
                      +in[(i+6)*n+(j+-5)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+-4)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+-3)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+-2)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+-1)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+0)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+1)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+2)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+3)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+4)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+5)] * 0.0004734848484848485
                      +in[(i+6)*n+(j+6)] * 0.005208333333333333
                      +in[(i+6)*n+(j+7)] * 0.00034340659340659343
                      +in[(i+6)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+7)*n+(j+-8)] * -0.00026041666666666666
                      +in[(i+7)*n+(j+-6)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+-5)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+-4)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+-3)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+-2)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+-1)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+0)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+1)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+2)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+3)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+4)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+5)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+6)] * 0.00034340659340659343
                      +in[(i+7)*n+(j+7)] * 0.004464285714285714
                      +in[(i+7)*n+(j+8)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-7)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-6)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-5)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-4)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-3)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-2)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+-1)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+0)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+1)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+2)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+3)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+4)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+5)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+6)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+7)] * 0.00026041666666666666
                      +in[(i+8)*n+(j+8)] * 0.00390625
                      ;
       }
     }
}

void grid9(const int n, const int gs, const double * restrict in, double * restrict out) {
    OMP_TASKLOOP( firstprivate(n) shared(in,out) grainsize(gs) )
    for (int i=9; i<n-9; i++) {
      OMP_SIMD
      for (int j=9; j<n-9; j++) {
        out[i*n+j] += +in[(i+-9)*n+(j+-9)] * -0.0030864197530864196
                      +in[(i+-9)*n+(j+-8)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-7)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-6)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-5)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-4)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-3)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-2)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+-1)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+0)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+1)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+2)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+3)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+4)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+5)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+6)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+7)] * -0.00018155410312273057
                      +in[(i+-9)*n+(j+8)] * -0.00018155410312273057
                      +in[(i+-8)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-8)*n+(j+-8)] * -0.003472222222222222
                      +in[(i+-8)*n+(j+-7)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+-6)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+-5)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+-4)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+-3)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+-2)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+-1)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+0)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+1)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+2)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+3)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+4)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+5)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+6)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+7)] * -0.0002314814814814815
                      +in[(i+-8)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-7)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-7)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-7)*n+(j+-7)] * -0.003968253968253968
                      +in[(i+-7)*n+(j+-6)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+-5)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+-4)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+-3)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+-2)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+-1)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+0)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+1)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+2)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+3)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+4)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+5)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+6)] * -0.00030525030525030525
                      +in[(i+-7)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-7)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-6)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-6)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-6)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+-6)*n+(j+-6)] * -0.004629629629629629
                      +in[(i+-6)*n+(j+-5)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+-4)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+-3)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+-2)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+-1)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+0)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+1)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+2)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+3)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+4)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+5)] * -0.00042087542087542086
                      +in[(i+-6)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+-6)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-6)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-5)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-5)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-5)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+-5)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+-5)*n+(j+-5)] * -0.005555555555555556
                      +in[(i+-5)*n+(j+-4)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+-3)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+-2)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+-1)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+0)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+1)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+2)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+3)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+4)] * -0.0006172839506172839
                      +in[(i+-5)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+-5)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+-5)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-5)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-4)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-4)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-4)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+-4)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+-4)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+-4)*n+(j+-4)] * -0.006944444444444444
                      +in[(i+-4)*n+(j+-3)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+-2)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+-1)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+0)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+1)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+2)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+3)] * -0.000992063492063492
                      +in[(i+-4)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+-4)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+-4)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+-4)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-4)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-3)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-3)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-3)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+-3)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+-3)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+-3)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+-3)*n+(j+-3)] * -0.009259259259259259
                      +in[(i+-3)*n+(j+-2)] * -0.001851851851851852
                      +in[(i+-3)*n+(j+-1)] * -0.001851851851851852
                      +in[(i+-3)*n+(j+0)] * -0.001851851851851852
                      +in[(i+-3)*n+(j+1)] * -0.001851851851851852
                      +in[(i+-3)*n+(j+2)] * -0.001851851851851852
                      +in[(i+-3)*n+(j+4)] * 0.000992063492063492
                      +in[(i+-3)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+-3)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+-3)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+-3)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-3)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-2)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-2)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-2)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+-2)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+-2)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+-2)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+-2)*n+(j+-3)] * -0.001851851851851852
                      +in[(i+-2)*n+(j+-2)] * -0.013888888888888888
                      +in[(i+-2)*n+(j+-1)] * -0.004629629629629629
                      +in[(i+-2)*n+(j+0)] * -0.004629629629629629
                      +in[(i+-2)*n+(j+1)] * -0.004629629629629629
                      +in[(i+-2)*n+(j+3)] * 0.001851851851851852
                      +in[(i+-2)*n+(j+4)] * 0.000992063492063492
                      +in[(i+-2)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+-2)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+-2)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+-2)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-2)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+-1)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+-1)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+-1)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+-1)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+-1)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+-1)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+-1)*n+(j+-3)] * -0.001851851851851852
                      +in[(i+-1)*n+(j+-2)] * -0.004629629629629629
                      +in[(i+-1)*n+(j+-1)] * -0.027777777777777776
                      +in[(i+-1)*n+(j+0)] * -0.027777777777777776
                      +in[(i+-1)*n+(j+2)] * 0.004629629629629629
                      +in[(i+-1)*n+(j+3)] * 0.001851851851851852
                      +in[(i+-1)*n+(j+4)] * 0.000992063492063492
                      +in[(i+-1)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+-1)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+-1)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+-1)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+-1)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+0)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+0)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+0)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+0)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+0)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+0)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+0)*n+(j+-3)] * -0.001851851851851852
                      +in[(i+0)*n+(j+-2)] * -0.004629629629629629
                      +in[(i+0)*n+(j+-1)] * -0.027777777777777776
                      +in[(i+0)*n+(j+1)] * 0.027777777777777776
                      +in[(i+0)*n+(j+2)] * 0.004629629629629629
                      +in[(i+0)*n+(j+3)] * 0.001851851851851852
                      +in[(i+0)*n+(j+4)] * 0.000992063492063492
                      +in[(i+0)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+0)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+0)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+0)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+0)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+1)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+1)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+1)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+1)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+1)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+1)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+1)*n+(j+-3)] * -0.001851851851851852
                      +in[(i+1)*n+(j+-2)] * -0.004629629629629629
                      +in[(i+1)*n+(j+0)] * 0.027777777777777776
                      +in[(i+1)*n+(j+1)] * 0.027777777777777776
                      +in[(i+1)*n+(j+2)] * 0.004629629629629629
                      +in[(i+1)*n+(j+3)] * 0.001851851851851852
                      +in[(i+1)*n+(j+4)] * 0.000992063492063492
                      +in[(i+1)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+1)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+1)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+1)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+1)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+2)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+2)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+2)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+2)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+2)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+2)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+2)*n+(j+-3)] * -0.001851851851851852
                      +in[(i+2)*n+(j+-1)] * 0.004629629629629629
                      +in[(i+2)*n+(j+0)] * 0.004629629629629629
                      +in[(i+2)*n+(j+1)] * 0.004629629629629629
                      +in[(i+2)*n+(j+2)] * 0.013888888888888888
                      +in[(i+2)*n+(j+3)] * 0.001851851851851852
                      +in[(i+2)*n+(j+4)] * 0.000992063492063492
                      +in[(i+2)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+2)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+2)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+2)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+2)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+3)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+3)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+3)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+3)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+3)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+3)*n+(j+-4)] * -0.000992063492063492
                      +in[(i+3)*n+(j+-2)] * 0.001851851851851852
                      +in[(i+3)*n+(j+-1)] * 0.001851851851851852
                      +in[(i+3)*n+(j+0)] * 0.001851851851851852
                      +in[(i+3)*n+(j+1)] * 0.001851851851851852
                      +in[(i+3)*n+(j+2)] * 0.001851851851851852
                      +in[(i+3)*n+(j+3)] * 0.009259259259259259
                      +in[(i+3)*n+(j+4)] * 0.000992063492063492
                      +in[(i+3)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+3)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+3)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+3)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+3)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+4)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+4)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+4)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+4)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+4)*n+(j+-5)] * -0.0006172839506172839
                      +in[(i+4)*n+(j+-3)] * 0.000992063492063492
                      +in[(i+4)*n+(j+-2)] * 0.000992063492063492
                      +in[(i+4)*n+(j+-1)] * 0.000992063492063492
                      +in[(i+4)*n+(j+0)] * 0.000992063492063492
                      +in[(i+4)*n+(j+1)] * 0.000992063492063492
                      +in[(i+4)*n+(j+2)] * 0.000992063492063492
                      +in[(i+4)*n+(j+3)] * 0.000992063492063492
                      +in[(i+4)*n+(j+4)] * 0.006944444444444444
                      +in[(i+4)*n+(j+5)] * 0.0006172839506172839
                      +in[(i+4)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+4)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+4)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+4)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+5)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+5)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+5)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+5)*n+(j+-6)] * -0.00042087542087542086
                      +in[(i+5)*n+(j+-4)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+-3)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+-2)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+-1)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+0)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+1)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+2)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+3)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+4)] * 0.0006172839506172839
                      +in[(i+5)*n+(j+5)] * 0.005555555555555556
                      +in[(i+5)*n+(j+6)] * 0.00042087542087542086
                      +in[(i+5)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+5)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+5)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+6)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+6)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+6)*n+(j+-7)] * -0.00030525030525030525
                      +in[(i+6)*n+(j+-5)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+-4)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+-3)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+-2)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+-1)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+0)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+1)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+2)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+3)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+4)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+5)] * 0.00042087542087542086
                      +in[(i+6)*n+(j+6)] * 0.004629629629629629
                      +in[(i+6)*n+(j+7)] * 0.00030525030525030525
                      +in[(i+6)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+6)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+7)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+7)*n+(j+-8)] * -0.0002314814814814815
                      +in[(i+7)*n+(j+-6)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+-5)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+-4)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+-3)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+-2)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+-1)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+0)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+1)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+2)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+3)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+4)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+5)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+6)] * 0.00030525030525030525
                      +in[(i+7)*n+(j+7)] * 0.003968253968253968
                      +in[(i+7)*n+(j+8)] * 0.0002314814814814815
                      +in[(i+7)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+8)*n+(j+-9)] * -0.00018155410312273057
                      +in[(i+8)*n+(j+-7)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+-6)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+-5)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+-4)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+-3)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+-2)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+-1)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+0)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+1)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+2)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+3)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+4)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+5)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+6)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+7)] * 0.0002314814814814815
                      +in[(i+8)*n+(j+8)] * 0.003472222222222222
                      +in[(i+8)*n+(j+9)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-8)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-7)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-6)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-5)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-4)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-3)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-2)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+-1)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+0)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+1)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+2)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+3)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+4)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+5)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+6)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+7)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+8)] * 0.00018155410312273057
                      +in[(i+9)*n+(j+9)] * 0.0030864197530864196
                      ;
       }
     }
}

