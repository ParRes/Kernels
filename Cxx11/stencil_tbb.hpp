void star1(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(1, n-1, t, 1, n-1, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i)*n+(j-1)] * -0.5
                          +in[(i-1)*n+(j)] * -0.5
                          +in[(i+1)*n+(j)] * 0.5
                          +in[(i)*n+(j+1)] * 0.5;
      }
    }
  }, tbb_partitioner );
}

void star2(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(2, n-2, t, 2, n-2, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i)*n+(j-2)] * -0.125
                          +in[(i)*n+(j-1)] * -0.25
                          +in[(i-2)*n+(j)] * -0.125
                          +in[(i-1)*n+(j)] * -0.25
                          +in[(i+1)*n+(j)] * 0.25
                          +in[(i+2)*n+(j)] * 0.125
                          +in[(i)*n+(j+1)] * 0.25
                          +in[(i)*n+(j+2)] * 0.125;
      }
    }
  }, tbb_partitioner );
}

void star3(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(3, n-3, t, 3, n-3, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i)*n+(j-3)] * -0.05555555555555555
                          +in[(i)*n+(j-2)] * -0.08333333333333333
                          +in[(i)*n+(j-1)] * -0.16666666666666666
                          +in[(i-3)*n+(j)] * -0.05555555555555555
                          +in[(i-2)*n+(j)] * -0.08333333333333333
                          +in[(i-1)*n+(j)] * -0.16666666666666666
                          +in[(i+1)*n+(j)] * 0.16666666666666666
                          +in[(i+2)*n+(j)] * 0.08333333333333333
                          +in[(i+3)*n+(j)] * 0.05555555555555555
                          +in[(i)*n+(j+1)] * 0.16666666666666666
                          +in[(i)*n+(j+2)] * 0.08333333333333333
                          +in[(i)*n+(j+3)] * 0.05555555555555555;
      }
    }
  }, tbb_partitioner );
}

void star4(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(4, n-4, t, 4, n-4, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i)*n+(j-4)] * -0.03125
                          +in[(i)*n+(j-3)] * -0.041666666666666664
                          +in[(i)*n+(j-2)] * -0.0625
                          +in[(i)*n+(j-1)] * -0.125
                          +in[(i-4)*n+(j)] * -0.03125
                          +in[(i-3)*n+(j)] * -0.041666666666666664
                          +in[(i-2)*n+(j)] * -0.0625
                          +in[(i-1)*n+(j)] * -0.125
                          +in[(i+1)*n+(j)] * 0.125
                          +in[(i+2)*n+(j)] * 0.0625
                          +in[(i+3)*n+(j)] * 0.041666666666666664
                          +in[(i+4)*n+(j)] * 0.03125
                          +in[(i)*n+(j+1)] * 0.125
                          +in[(i)*n+(j+2)] * 0.0625
                          +in[(i)*n+(j+3)] * 0.041666666666666664
                          +in[(i)*n+(j+4)] * 0.03125;
      }
    }
  }, tbb_partitioner );
}

void star5(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(5, n-5, t, 5, n-5, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i)*n+(j-5)] * -0.02
                          +in[(i)*n+(j-4)] * -0.025
                          +in[(i)*n+(j-3)] * -0.03333333333333333
                          +in[(i)*n+(j-2)] * -0.05
                          +in[(i)*n+(j-1)] * -0.1
                          +in[(i-5)*n+(j)] * -0.02
                          +in[(i-4)*n+(j)] * -0.025
                          +in[(i-3)*n+(j)] * -0.03333333333333333
                          +in[(i-2)*n+(j)] * -0.05
                          +in[(i-1)*n+(j)] * -0.1
                          +in[(i+1)*n+(j)] * 0.1
                          +in[(i+2)*n+(j)] * 0.05
                          +in[(i+3)*n+(j)] * 0.03333333333333333
                          +in[(i+4)*n+(j)] * 0.025
                          +in[(i+5)*n+(j)] * 0.02
                          +in[(i)*n+(j+1)] * 0.1
                          +in[(i)*n+(j+2)] * 0.05
                          +in[(i)*n+(j+3)] * 0.03333333333333333
                          +in[(i)*n+(j+4)] * 0.025
                          +in[(i)*n+(j+5)] * 0.02;
      }
    }
  }, tbb_partitioner );
}

void grid1(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(1, n-1, t, 1, n-1, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i-1)*n+(j-1)] * -0.25
                          +in[(i)*n+(j-1)] * -0.25
                          +in[(i-1)*n+(j)] * -0.25
                          +in[(i+1)*n+(j)] * 0.25
                          +in[(i)*n+(j+1)] * 0.25
                          +in[(i+1)*n+(j+1)] * 0.25
                          ;
      }
    }
  }, tbb_partitioner );
}

void grid2(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(2, n-2, t, 2, n-2, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i-2)*n+(j-2)] * -0.0625
                          +in[(i-1)*n+(j-2)] * -0.020833333333333332
                          +in[(i)*n+(j-2)] * -0.020833333333333332
                          +in[(i+1)*n+(j-2)] * -0.020833333333333332
                          +in[(i-2)*n+(j-1)] * -0.020833333333333332
                          +in[(i-1)*n+(j-1)] * -0.125
                          +in[(i)*n+(j-1)] * -0.125
                          +in[(i+2)*n+(j-1)] * 0.020833333333333332
                          +in[(i-2)*n+(j)] * -0.020833333333333332
                          +in[(i-1)*n+(j)] * -0.125
                          +in[(i+1)*n+(j)] * 0.125
                          +in[(i+2)*n+(j)] * 0.020833333333333332
                          +in[(i-2)*n+(j+1)] * -0.020833333333333332
                          +in[(i)*n+(j+1)] * 0.125
                          +in[(i+1)*n+(j+1)] * 0.125
                          +in[(i+2)*n+(j+1)] * 0.020833333333333332
                          +in[(i-1)*n+(j+2)] * 0.020833333333333332
                          +in[(i)*n+(j+2)] * 0.020833333333333332
                          +in[(i+1)*n+(j+2)] * 0.020833333333333332
                          +in[(i+2)*n+(j+2)] * 0.0625
                          ;
      }
    }
  }, tbb_partitioner );
}

void grid3(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(3, n-3, t, 3, n-3, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i-3)*n+(j-3)] * -0.027777777777777776
                          +in[(i-2)*n+(j-3)] * -0.005555555555555556
                          +in[(i-1)*n+(j-3)] * -0.005555555555555556
                          +in[(i)*n+(j-3)] * -0.005555555555555556
                          +in[(i+1)*n+(j-3)] * -0.005555555555555556
                          +in[(i+2)*n+(j-3)] * -0.005555555555555556
                          +in[(i-3)*n+(j-2)] * -0.005555555555555556
                          +in[(i-2)*n+(j-2)] * -0.041666666666666664
                          +in[(i-1)*n+(j-2)] * -0.013888888888888888
                          +in[(i)*n+(j-2)] * -0.013888888888888888
                          +in[(i+1)*n+(j-2)] * -0.013888888888888888
                          +in[(i+3)*n+(j-2)] * 0.005555555555555556
                          +in[(i-3)*n+(j-1)] * -0.005555555555555556
                          +in[(i-2)*n+(j-1)] * -0.013888888888888888
                          +in[(i-1)*n+(j-1)] * -0.08333333333333333
                          +in[(i)*n+(j-1)] * -0.08333333333333333
                          +in[(i+2)*n+(j-1)] * 0.013888888888888888
                          +in[(i+3)*n+(j-1)] * 0.005555555555555556
                          +in[(i-3)*n+(j)] * -0.005555555555555556
                          +in[(i-2)*n+(j)] * -0.013888888888888888
                          +in[(i-1)*n+(j)] * -0.08333333333333333
                          +in[(i+1)*n+(j)] * 0.08333333333333333
                          +in[(i+2)*n+(j)] * 0.013888888888888888
                          +in[(i+3)*n+(j)] * 0.005555555555555556
                          +in[(i-3)*n+(j+1)] * -0.005555555555555556
                          +in[(i-2)*n+(j+1)] * -0.013888888888888888
                          +in[(i)*n+(j+1)] * 0.08333333333333333
                          +in[(i+1)*n+(j+1)] * 0.08333333333333333
                          +in[(i+2)*n+(j+1)] * 0.013888888888888888
                          +in[(i+3)*n+(j+1)] * 0.005555555555555556
                          +in[(i-3)*n+(j+2)] * -0.005555555555555556
                          +in[(i-1)*n+(j+2)] * 0.013888888888888888
                          +in[(i)*n+(j+2)] * 0.013888888888888888
                          +in[(i+1)*n+(j+2)] * 0.013888888888888888
                          +in[(i+2)*n+(j+2)] * 0.041666666666666664
                          +in[(i+3)*n+(j+2)] * 0.005555555555555556
                          +in[(i-2)*n+(j+3)] * 0.005555555555555556
                          +in[(i-1)*n+(j+3)] * 0.005555555555555556
                          +in[(i)*n+(j+3)] * 0.005555555555555556
                          +in[(i+1)*n+(j+3)] * 0.005555555555555556
                          +in[(i+2)*n+(j+3)] * 0.005555555555555556
                          +in[(i+3)*n+(j+3)] * 0.027777777777777776
                          ;
      }
    }
  }, tbb_partitioner );
}

void grid4(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(4, n-4, t, 4, n-4, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i-4)*n+(j-4)] * -0.015625
                          +in[(i-3)*n+(j-4)] * -0.002232142857142857
                          +in[(i-2)*n+(j-4)] * -0.002232142857142857
                          +in[(i-1)*n+(j-4)] * -0.002232142857142857
                          +in[(i)*n+(j-4)] * -0.002232142857142857
                          +in[(i+1)*n+(j-4)] * -0.002232142857142857
                          +in[(i+2)*n+(j-4)] * -0.002232142857142857
                          +in[(i+3)*n+(j-4)] * -0.002232142857142857
                          +in[(i-4)*n+(j-3)] * -0.002232142857142857
                          +in[(i-3)*n+(j-3)] * -0.020833333333333332
                          +in[(i-2)*n+(j-3)] * -0.004166666666666667
                          +in[(i-1)*n+(j-3)] * -0.004166666666666667
                          +in[(i)*n+(j-3)] * -0.004166666666666667
                          +in[(i+1)*n+(j-3)] * -0.004166666666666667
                          +in[(i+2)*n+(j-3)] * -0.004166666666666667
                          +in[(i+4)*n+(j-3)] * 0.002232142857142857
                          +in[(i-4)*n+(j-2)] * -0.002232142857142857
                          +in[(i-3)*n+(j-2)] * -0.004166666666666667
                          +in[(i-2)*n+(j-2)] * -0.03125
                          +in[(i-1)*n+(j-2)] * -0.010416666666666666
                          +in[(i)*n+(j-2)] * -0.010416666666666666
                          +in[(i+1)*n+(j-2)] * -0.010416666666666666
                          +in[(i+3)*n+(j-2)] * 0.004166666666666667
                          +in[(i+4)*n+(j-2)] * 0.002232142857142857
                          +in[(i-4)*n+(j-1)] * -0.002232142857142857
                          +in[(i-3)*n+(j-1)] * -0.004166666666666667
                          +in[(i-2)*n+(j-1)] * -0.010416666666666666
                          +in[(i-1)*n+(j-1)] * -0.0625
                          +in[(i)*n+(j-1)] * -0.0625
                          +in[(i+2)*n+(j-1)] * 0.010416666666666666
                          +in[(i+3)*n+(j-1)] * 0.004166666666666667
                          +in[(i+4)*n+(j-1)] * 0.002232142857142857
                          +in[(i-4)*n+(j)] * -0.002232142857142857
                          +in[(i-3)*n+(j)] * -0.004166666666666667
                          +in[(i-2)*n+(j)] * -0.010416666666666666
                          +in[(i-1)*n+(j)] * -0.0625
                          +in[(i+1)*n+(j)] * 0.0625
                          +in[(i+2)*n+(j)] * 0.010416666666666666
                          +in[(i+3)*n+(j)] * 0.004166666666666667
                          +in[(i+4)*n+(j)] * 0.002232142857142857
                          +in[(i-4)*n+(j+1)] * -0.002232142857142857
                          +in[(i-3)*n+(j+1)] * -0.004166666666666667
                          +in[(i-2)*n+(j+1)] * -0.010416666666666666
                          +in[(i)*n+(j+1)] * 0.0625
                          +in[(i+1)*n+(j+1)] * 0.0625
                          +in[(i+2)*n+(j+1)] * 0.010416666666666666
                          +in[(i+3)*n+(j+1)] * 0.004166666666666667
                          +in[(i+4)*n+(j+1)] * 0.002232142857142857
                          +in[(i-4)*n+(j+2)] * -0.002232142857142857
                          +in[(i-3)*n+(j+2)] * -0.004166666666666667
                          +in[(i-1)*n+(j+2)] * 0.010416666666666666
                          +in[(i)*n+(j+2)] * 0.010416666666666666
                          +in[(i+1)*n+(j+2)] * 0.010416666666666666
                          +in[(i+2)*n+(j+2)] * 0.03125
                          +in[(i+3)*n+(j+2)] * 0.004166666666666667
                          +in[(i+4)*n+(j+2)] * 0.002232142857142857
                          +in[(i-4)*n+(j+3)] * -0.002232142857142857
                          +in[(i-2)*n+(j+3)] * 0.004166666666666667
                          +in[(i-1)*n+(j+3)] * 0.004166666666666667
                          +in[(i)*n+(j+3)] * 0.004166666666666667
                          +in[(i+1)*n+(j+3)] * 0.004166666666666667
                          +in[(i+2)*n+(j+3)] * 0.004166666666666667
                          +in[(i+3)*n+(j+3)] * 0.020833333333333332
                          +in[(i+4)*n+(j+3)] * 0.002232142857142857
                          +in[(i-3)*n+(j+4)] * 0.002232142857142857
                          +in[(i-2)*n+(j+4)] * 0.002232142857142857
                          +in[(i-1)*n+(j+4)] * 0.002232142857142857
                          +in[(i)*n+(j+4)] * 0.002232142857142857
                          +in[(i+1)*n+(j+4)] * 0.002232142857142857
                          +in[(i+2)*n+(j+4)] * 0.002232142857142857
                          +in[(i+3)*n+(j+4)] * 0.002232142857142857
                          +in[(i+4)*n+(j+4)] * 0.015625
                          ;
      }
    }
  }, tbb_partitioner );
}

void grid5(const int n, const int t, prk::vector<double> & in, prk::vector<double> & out) {
  tbb::blocked_range2d<int> range(5, n-5, t, 5, n-5, t);
  tbb::parallel_for( range, [&](decltype(range)& r ) {
    for (int i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      PRAGMA_SIMD
      for (int j=r.cols().begin(); j!=r.cols().end(); ++j ) {
            out[i*n+j] += +in[(i-5)*n+(j-5)] * -0.01
                          +in[(i-4)*n+(j-5)] * -0.0011111111111111111
                          +in[(i-3)*n+(j-5)] * -0.0011111111111111111
                          +in[(i-2)*n+(j-5)] * -0.0011111111111111111
                          +in[(i-1)*n+(j-5)] * -0.0011111111111111111
                          +in[(i)*n+(j-5)] * -0.0011111111111111111
                          +in[(i+1)*n+(j-5)] * -0.0011111111111111111
                          +in[(i+2)*n+(j-5)] * -0.0011111111111111111
                          +in[(i+3)*n+(j-5)] * -0.0011111111111111111
                          +in[(i+4)*n+(j-5)] * -0.0011111111111111111
                          +in[(i-5)*n+(j-4)] * -0.0011111111111111111
                          +in[(i-4)*n+(j-4)] * -0.0125
                          +in[(i-3)*n+(j-4)] * -0.0017857142857142857
                          +in[(i-2)*n+(j-4)] * -0.0017857142857142857
                          +in[(i-1)*n+(j-4)] * -0.0017857142857142857
                          +in[(i)*n+(j-4)] * -0.0017857142857142857
                          +in[(i+1)*n+(j-4)] * -0.0017857142857142857
                          +in[(i+2)*n+(j-4)] * -0.0017857142857142857
                          +in[(i+3)*n+(j-4)] * -0.0017857142857142857
                          +in[(i+5)*n+(j-4)] * 0.0011111111111111111
                          +in[(i-5)*n+(j-3)] * -0.0011111111111111111
                          +in[(i-4)*n+(j-3)] * -0.0017857142857142857
                          +in[(i-3)*n+(j-3)] * -0.016666666666666666
                          +in[(i-2)*n+(j-3)] * -0.0033333333333333335
                          +in[(i-1)*n+(j-3)] * -0.0033333333333333335
                          +in[(i)*n+(j-3)] * -0.0033333333333333335
                          +in[(i+1)*n+(j-3)] * -0.0033333333333333335
                          +in[(i+2)*n+(j-3)] * -0.0033333333333333335
                          +in[(i+4)*n+(j-3)] * 0.0017857142857142857
                          +in[(i+5)*n+(j-3)] * 0.0011111111111111111
                          +in[(i-5)*n+(j-2)] * -0.0011111111111111111
                          +in[(i-4)*n+(j-2)] * -0.0017857142857142857
                          +in[(i-3)*n+(j-2)] * -0.0033333333333333335
                          +in[(i-2)*n+(j-2)] * -0.025
                          +in[(i-1)*n+(j-2)] * -0.008333333333333333
                          +in[(i)*n+(j-2)] * -0.008333333333333333
                          +in[(i+1)*n+(j-2)] * -0.008333333333333333
                          +in[(i+3)*n+(j-2)] * 0.0033333333333333335
                          +in[(i+4)*n+(j-2)] * 0.0017857142857142857
                          +in[(i+5)*n+(j-2)] * 0.0011111111111111111
                          +in[(i-5)*n+(j-1)] * -0.0011111111111111111
                          +in[(i-4)*n+(j-1)] * -0.0017857142857142857
                          +in[(i-3)*n+(j-1)] * -0.0033333333333333335
                          +in[(i-2)*n+(j-1)] * -0.008333333333333333
                          +in[(i-1)*n+(j-1)] * -0.05
                          +in[(i)*n+(j-1)] * -0.05
                          +in[(i+2)*n+(j-1)] * 0.008333333333333333
                          +in[(i+3)*n+(j-1)] * 0.0033333333333333335
                          +in[(i+4)*n+(j-1)] * 0.0017857142857142857
                          +in[(i+5)*n+(j-1)] * 0.0011111111111111111
                          +in[(i-5)*n+(j)] * -0.0011111111111111111
                          +in[(i-4)*n+(j)] * -0.0017857142857142857
                          +in[(i-3)*n+(j)] * -0.0033333333333333335
                          +in[(i-2)*n+(j)] * -0.008333333333333333
                          +in[(i-1)*n+(j)] * -0.05
                          +in[(i+1)*n+(j)] * 0.05
                          +in[(i+2)*n+(j)] * 0.008333333333333333
                          +in[(i+3)*n+(j)] * 0.0033333333333333335
                          +in[(i+4)*n+(j)] * 0.0017857142857142857
                          +in[(i+5)*n+(j)] * 0.0011111111111111111
                          +in[(i-5)*n+(j+1)] * -0.0011111111111111111
                          +in[(i-4)*n+(j+1)] * -0.0017857142857142857
                          +in[(i-3)*n+(j+1)] * -0.0033333333333333335
                          +in[(i-2)*n+(j+1)] * -0.008333333333333333
                          +in[(i)*n+(j+1)] * 0.05
                          +in[(i+1)*n+(j+1)] * 0.05
                          +in[(i+2)*n+(j+1)] * 0.008333333333333333
                          +in[(i+3)*n+(j+1)] * 0.0033333333333333335
                          +in[(i+4)*n+(j+1)] * 0.0017857142857142857
                          +in[(i+5)*n+(j+1)] * 0.0011111111111111111
                          +in[(i-5)*n+(j+2)] * -0.0011111111111111111
                          +in[(i-4)*n+(j+2)] * -0.0017857142857142857
                          +in[(i-3)*n+(j+2)] * -0.0033333333333333335
                          +in[(i-1)*n+(j+2)] * 0.008333333333333333
                          +in[(i)*n+(j+2)] * 0.008333333333333333
                          +in[(i+1)*n+(j+2)] * 0.008333333333333333
                          +in[(i+2)*n+(j+2)] * 0.025
                          +in[(i+3)*n+(j+2)] * 0.0033333333333333335
                          +in[(i+4)*n+(j+2)] * 0.0017857142857142857
                          +in[(i+5)*n+(j+2)] * 0.0011111111111111111
                          +in[(i-5)*n+(j+3)] * -0.0011111111111111111
                          +in[(i-4)*n+(j+3)] * -0.0017857142857142857
                          +in[(i-2)*n+(j+3)] * 0.0033333333333333335
                          +in[(i-1)*n+(j+3)] * 0.0033333333333333335
                          +in[(i)*n+(j+3)] * 0.0033333333333333335
                          +in[(i+1)*n+(j+3)] * 0.0033333333333333335
                          +in[(i+2)*n+(j+3)] * 0.0033333333333333335
                          +in[(i+3)*n+(j+3)] * 0.016666666666666666
                          +in[(i+4)*n+(j+3)] * 0.0017857142857142857
                          +in[(i+5)*n+(j+3)] * 0.0011111111111111111
                          +in[(i-5)*n+(j+4)] * -0.0011111111111111111
                          +in[(i-3)*n+(j+4)] * 0.0017857142857142857
                          +in[(i-2)*n+(j+4)] * 0.0017857142857142857
                          +in[(i-1)*n+(j+4)] * 0.0017857142857142857
                          +in[(i)*n+(j+4)] * 0.0017857142857142857
                          +in[(i+1)*n+(j+4)] * 0.0017857142857142857
                          +in[(i+2)*n+(j+4)] * 0.0017857142857142857
                          +in[(i+3)*n+(j+4)] * 0.0017857142857142857
                          +in[(i+4)*n+(j+4)] * 0.0125
                          +in[(i+5)*n+(j+4)] * 0.0011111111111111111
                          +in[(i-4)*n+(j+5)] * 0.0011111111111111111
                          +in[(i-3)*n+(j+5)] * 0.0011111111111111111
                          +in[(i-2)*n+(j+5)] * 0.0011111111111111111
                          +in[(i-1)*n+(j+5)] * 0.0011111111111111111
                          +in[(i)*n+(j+5)] * 0.0011111111111111111
                          +in[(i+1)*n+(j+5)] * 0.0011111111111111111
                          +in[(i+2)*n+(j+5)] * 0.0011111111111111111
                          +in[(i+3)*n+(j+5)] * 0.0011111111111111111
                          +in[(i+4)*n+(j+5)] * 0.0011111111111111111
                          +in[(i+5)*n+(j+5)] * 0.01
                          ;
      }
    }
  }, tbb_partitioner );
}

