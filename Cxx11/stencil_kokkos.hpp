#define RESTRICT __restrict__

void star1(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1,n-1), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=1; j<n-1; ++j) {
        out(i,j) += +in(i+-1,j+0) * -0.5
                      +in(i+0,j+-1) * -0.5
                      +in(i+0,j+1) * 0.5
                      +in(i+1,j+0) * 0.5;
       }
     });
}

void star2(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(2,n-2), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=2; j<n-2; ++j) {
        out(i,j) += +in(i+-2,j+0) * -0.125
                      +in(i+-1,j+0) * -0.25
                      +in(i+0,j+-2) * -0.125
                      +in(i+0,j+-1) * -0.25
                      +in(i+0,j+1) * 0.25
                      +in(i+0,j+2) * 0.125
                      +in(i+1,j+0) * 0.25
                      +in(i+2,j+0) * 0.125;
       }
     });
}

void star3(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(3,n-3), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=3; j<n-3; ++j) {
        out(i,j) += +in(i+-3,j+0) * -0.05555555555555555
                      +in(i+-2,j+0) * -0.08333333333333333
                      +in(i+-1,j+0) * -0.16666666666666666
                      +in(i+0,j+-3) * -0.05555555555555555
                      +in(i+0,j+-2) * -0.08333333333333333
                      +in(i+0,j+-1) * -0.16666666666666666
                      +in(i+0,j+1) * 0.16666666666666666
                      +in(i+0,j+2) * 0.08333333333333333
                      +in(i+0,j+3) * 0.05555555555555555
                      +in(i+1,j+0) * 0.16666666666666666
                      +in(i+2,j+0) * 0.08333333333333333
                      +in(i+3,j+0) * 0.05555555555555555;
       }
     });
}

void star4(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(4,n-4), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=4; j<n-4; ++j) {
        out(i,j) += +in(i+-4,j+0) * -0.03125
                      +in(i+-3,j+0) * -0.041666666666666664
                      +in(i+-2,j+0) * -0.0625
                      +in(i+-1,j+0) * -0.125
                      +in(i+0,j+-4) * -0.03125
                      +in(i+0,j+-3) * -0.041666666666666664
                      +in(i+0,j+-2) * -0.0625
                      +in(i+0,j+-1) * -0.125
                      +in(i+0,j+1) * 0.125
                      +in(i+0,j+2) * 0.0625
                      +in(i+0,j+3) * 0.041666666666666664
                      +in(i+0,j+4) * 0.03125
                      +in(i+1,j+0) * 0.125
                      +in(i+2,j+0) * 0.0625
                      +in(i+3,j+0) * 0.041666666666666664
                      +in(i+4,j+0) * 0.03125;
       }
     });
}

void star5(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(5,n-5), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=5; j<n-5; ++j) {
        out(i,j) += +in(i+-5,j+0) * -0.02
                      +in(i+-4,j+0) * -0.025
                      +in(i+-3,j+0) * -0.03333333333333333
                      +in(i+-2,j+0) * -0.05
                      +in(i+-1,j+0) * -0.1
                      +in(i+0,j+-5) * -0.02
                      +in(i+0,j+-4) * -0.025
                      +in(i+0,j+-3) * -0.03333333333333333
                      +in(i+0,j+-2) * -0.05
                      +in(i+0,j+-1) * -0.1
                      +in(i+0,j+1) * 0.1
                      +in(i+0,j+2) * 0.05
                      +in(i+0,j+3) * 0.03333333333333333
                      +in(i+0,j+4) * 0.025
                      +in(i+0,j+5) * 0.02
                      +in(i+1,j+0) * 0.1
                      +in(i+2,j+0) * 0.05
                      +in(i+3,j+0) * 0.03333333333333333
                      +in(i+4,j+0) * 0.025
                      +in(i+5,j+0) * 0.02;
       }
     });
}

void star6(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(6,n-6), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=6; j<n-6; ++j) {
        out(i,j) += +in(i+-6,j+0) * -0.013888888888888888
                      +in(i+-5,j+0) * -0.016666666666666666
                      +in(i+-4,j+0) * -0.020833333333333332
                      +in(i+-3,j+0) * -0.027777777777777776
                      +in(i+-2,j+0) * -0.041666666666666664
                      +in(i+-1,j+0) * -0.08333333333333333
                      +in(i+0,j+-6) * -0.013888888888888888
                      +in(i+0,j+-5) * -0.016666666666666666
                      +in(i+0,j+-4) * -0.020833333333333332
                      +in(i+0,j+-3) * -0.027777777777777776
                      +in(i+0,j+-2) * -0.041666666666666664
                      +in(i+0,j+-1) * -0.08333333333333333
                      +in(i+0,j+1) * 0.08333333333333333
                      +in(i+0,j+2) * 0.041666666666666664
                      +in(i+0,j+3) * 0.027777777777777776
                      +in(i+0,j+4) * 0.020833333333333332
                      +in(i+0,j+5) * 0.016666666666666666
                      +in(i+0,j+6) * 0.013888888888888888
                      +in(i+1,j+0) * 0.08333333333333333
                      +in(i+2,j+0) * 0.041666666666666664
                      +in(i+3,j+0) * 0.027777777777777776
                      +in(i+4,j+0) * 0.020833333333333332
                      +in(i+5,j+0) * 0.016666666666666666
                      +in(i+6,j+0) * 0.013888888888888888;
       }
     });
}

void star7(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(7,n-7), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=7; j<n-7; ++j) {
        out(i,j) += +in(i+-7,j+0) * -0.01020408163265306
                      +in(i+-6,j+0) * -0.011904761904761904
                      +in(i+-5,j+0) * -0.014285714285714285
                      +in(i+-4,j+0) * -0.017857142857142856
                      +in(i+-3,j+0) * -0.023809523809523808
                      +in(i+-2,j+0) * -0.03571428571428571
                      +in(i+-1,j+0) * -0.07142857142857142
                      +in(i+0,j+-7) * -0.01020408163265306
                      +in(i+0,j+-6) * -0.011904761904761904
                      +in(i+0,j+-5) * -0.014285714285714285
                      +in(i+0,j+-4) * -0.017857142857142856
                      +in(i+0,j+-3) * -0.023809523809523808
                      +in(i+0,j+-2) * -0.03571428571428571
                      +in(i+0,j+-1) * -0.07142857142857142
                      +in(i+0,j+1) * 0.07142857142857142
                      +in(i+0,j+2) * 0.03571428571428571
                      +in(i+0,j+3) * 0.023809523809523808
                      +in(i+0,j+4) * 0.017857142857142856
                      +in(i+0,j+5) * 0.014285714285714285
                      +in(i+0,j+6) * 0.011904761904761904
                      +in(i+0,j+7) * 0.01020408163265306
                      +in(i+1,j+0) * 0.07142857142857142
                      +in(i+2,j+0) * 0.03571428571428571
                      +in(i+3,j+0) * 0.023809523809523808
                      +in(i+4,j+0) * 0.017857142857142856
                      +in(i+5,j+0) * 0.014285714285714285
                      +in(i+6,j+0) * 0.011904761904761904
                      +in(i+7,j+0) * 0.01020408163265306;
       }
     });
}

void star8(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(8,n-8), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=8; j<n-8; ++j) {
        out(i,j) += +in(i+-8,j+0) * -0.0078125
                      +in(i+-7,j+0) * -0.008928571428571428
                      +in(i+-6,j+0) * -0.010416666666666666
                      +in(i+-5,j+0) * -0.0125
                      +in(i+-4,j+0) * -0.015625
                      +in(i+-3,j+0) * -0.020833333333333332
                      +in(i+-2,j+0) * -0.03125
                      +in(i+-1,j+0) * -0.0625
                      +in(i+0,j+-8) * -0.0078125
                      +in(i+0,j+-7) * -0.008928571428571428
                      +in(i+0,j+-6) * -0.010416666666666666
                      +in(i+0,j+-5) * -0.0125
                      +in(i+0,j+-4) * -0.015625
                      +in(i+0,j+-3) * -0.020833333333333332
                      +in(i+0,j+-2) * -0.03125
                      +in(i+0,j+-1) * -0.0625
                      +in(i+0,j+1) * 0.0625
                      +in(i+0,j+2) * 0.03125
                      +in(i+0,j+3) * 0.020833333333333332
                      +in(i+0,j+4) * 0.015625
                      +in(i+0,j+5) * 0.0125
                      +in(i+0,j+6) * 0.010416666666666666
                      +in(i+0,j+7) * 0.008928571428571428
                      +in(i+0,j+8) * 0.0078125
                      +in(i+1,j+0) * 0.0625
                      +in(i+2,j+0) * 0.03125
                      +in(i+3,j+0) * 0.020833333333333332
                      +in(i+4,j+0) * 0.015625
                      +in(i+5,j+0) * 0.0125
                      +in(i+6,j+0) * 0.010416666666666666
                      +in(i+7,j+0) * 0.008928571428571428
                      +in(i+8,j+0) * 0.0078125;
       }
     });
}

void star9(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(9,n-9), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=9; j<n-9; ++j) {
        out(i,j) += +in(i+-9,j+0) * -0.006172839506172839
                      +in(i+-8,j+0) * -0.006944444444444444
                      +in(i+-7,j+0) * -0.007936507936507936
                      +in(i+-6,j+0) * -0.009259259259259259
                      +in(i+-5,j+0) * -0.011111111111111112
                      +in(i+-4,j+0) * -0.013888888888888888
                      +in(i+-3,j+0) * -0.018518518518518517
                      +in(i+-2,j+0) * -0.027777777777777776
                      +in(i+-1,j+0) * -0.05555555555555555
                      +in(i+0,j+-9) * -0.006172839506172839
                      +in(i+0,j+-8) * -0.006944444444444444
                      +in(i+0,j+-7) * -0.007936507936507936
                      +in(i+0,j+-6) * -0.009259259259259259
                      +in(i+0,j+-5) * -0.011111111111111112
                      +in(i+0,j+-4) * -0.013888888888888888
                      +in(i+0,j+-3) * -0.018518518518518517
                      +in(i+0,j+-2) * -0.027777777777777776
                      +in(i+0,j+-1) * -0.05555555555555555
                      +in(i+0,j+1) * 0.05555555555555555
                      +in(i+0,j+2) * 0.027777777777777776
                      +in(i+0,j+3) * 0.018518518518518517
                      +in(i+0,j+4) * 0.013888888888888888
                      +in(i+0,j+5) * 0.011111111111111112
                      +in(i+0,j+6) * 0.009259259259259259
                      +in(i+0,j+7) * 0.007936507936507936
                      +in(i+0,j+8) * 0.006944444444444444
                      +in(i+0,j+9) * 0.006172839506172839
                      +in(i+1,j+0) * 0.05555555555555555
                      +in(i+2,j+0) * 0.027777777777777776
                      +in(i+3,j+0) * 0.018518518518518517
                      +in(i+4,j+0) * 0.013888888888888888
                      +in(i+5,j+0) * 0.011111111111111112
                      +in(i+6,j+0) * 0.009259259259259259
                      +in(i+7,j+0) * 0.007936507936507936
                      +in(i+8,j+0) * 0.006944444444444444
                      +in(i+9,j+0) * 0.006172839506172839;
       }
     });
}

void grid1(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1,n-1), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=1; j<n-1; ++j) {
        out(i,j) += +in(i+-1,j+-1) * -0.25
                      +in(i+-1,j+0) * -0.25
                      +in(i+0,j+-1) * -0.25
                      +in(i+0,j+1) * 0.25
                      +in(i+1,j+0) * 0.25
                      +in(i+1,j+1) * 0.25
                      ;
       }
     });
}

void grid2(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(2,n-2), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=2; j<n-2; ++j) {
        out(i,j) += +in(i+-2,j+-2) * -0.0625
                      +in(i+-2,j+-1) * -0.020833333333333332
                      +in(i+-2,j+0) * -0.020833333333333332
                      +in(i+-2,j+1) * -0.020833333333333332
                      +in(i+-1,j+-2) * -0.020833333333333332
                      +in(i+-1,j+-1) * -0.125
                      +in(i+-1,j+0) * -0.125
                      +in(i+-1,j+2) * 0.020833333333333332
                      +in(i+0,j+-2) * -0.020833333333333332
                      +in(i+0,j+-1) * -0.125
                      +in(i+0,j+1) * 0.125
                      +in(i+0,j+2) * 0.020833333333333332
                      +in(i+1,j+-2) * -0.020833333333333332
                      +in(i+1,j+0) * 0.125
                      +in(i+1,j+1) * 0.125
                      +in(i+1,j+2) * 0.020833333333333332
                      +in(i+2,j+-1) * 0.020833333333333332
                      +in(i+2,j+0) * 0.020833333333333332
                      +in(i+2,j+1) * 0.020833333333333332
                      +in(i+2,j+2) * 0.0625
                      ;
       }
     });
}

void grid3(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(3,n-3), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=3; j<n-3; ++j) {
        out(i,j) += +in(i+-3,j+-3) * -0.027777777777777776
                      +in(i+-3,j+-2) * -0.005555555555555556
                      +in(i+-3,j+-1) * -0.005555555555555556
                      +in(i+-3,j+0) * -0.005555555555555556
                      +in(i+-3,j+1) * -0.005555555555555556
                      +in(i+-3,j+2) * -0.005555555555555556
                      +in(i+-2,j+-3) * -0.005555555555555556
                      +in(i+-2,j+-2) * -0.041666666666666664
                      +in(i+-2,j+-1) * -0.013888888888888888
                      +in(i+-2,j+0) * -0.013888888888888888
                      +in(i+-2,j+1) * -0.013888888888888888
                      +in(i+-2,j+3) * 0.005555555555555556
                      +in(i+-1,j+-3) * -0.005555555555555556
                      +in(i+-1,j+-2) * -0.013888888888888888
                      +in(i+-1,j+-1) * -0.08333333333333333
                      +in(i+-1,j+0) * -0.08333333333333333
                      +in(i+-1,j+2) * 0.013888888888888888
                      +in(i+-1,j+3) * 0.005555555555555556
                      +in(i+0,j+-3) * -0.005555555555555556
                      +in(i+0,j+-2) * -0.013888888888888888
                      +in(i+0,j+-1) * -0.08333333333333333
                      +in(i+0,j+1) * 0.08333333333333333
                      +in(i+0,j+2) * 0.013888888888888888
                      +in(i+0,j+3) * 0.005555555555555556
                      +in(i+1,j+-3) * -0.005555555555555556
                      +in(i+1,j+-2) * -0.013888888888888888
                      +in(i+1,j+0) * 0.08333333333333333
                      +in(i+1,j+1) * 0.08333333333333333
                      +in(i+1,j+2) * 0.013888888888888888
                      +in(i+1,j+3) * 0.005555555555555556
                      +in(i+2,j+-3) * -0.005555555555555556
                      +in(i+2,j+-1) * 0.013888888888888888
                      +in(i+2,j+0) * 0.013888888888888888
                      +in(i+2,j+1) * 0.013888888888888888
                      +in(i+2,j+2) * 0.041666666666666664
                      +in(i+2,j+3) * 0.005555555555555556
                      +in(i+3,j+-2) * 0.005555555555555556
                      +in(i+3,j+-1) * 0.005555555555555556
                      +in(i+3,j+0) * 0.005555555555555556
                      +in(i+3,j+1) * 0.005555555555555556
                      +in(i+3,j+2) * 0.005555555555555556
                      +in(i+3,j+3) * 0.027777777777777776
                      ;
       }
     });
}

void grid4(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(4,n-4), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=4; j<n-4; ++j) {
        out(i,j) += +in(i+-4,j+-4) * -0.015625
                      +in(i+-4,j+-3) * -0.002232142857142857
                      +in(i+-4,j+-2) * -0.002232142857142857
                      +in(i+-4,j+-1) * -0.002232142857142857
                      +in(i+-4,j+0) * -0.002232142857142857
                      +in(i+-4,j+1) * -0.002232142857142857
                      +in(i+-4,j+2) * -0.002232142857142857
                      +in(i+-4,j+3) * -0.002232142857142857
                      +in(i+-3,j+-4) * -0.002232142857142857
                      +in(i+-3,j+-3) * -0.020833333333333332
                      +in(i+-3,j+-2) * -0.004166666666666667
                      +in(i+-3,j+-1) * -0.004166666666666667
                      +in(i+-3,j+0) * -0.004166666666666667
                      +in(i+-3,j+1) * -0.004166666666666667
                      +in(i+-3,j+2) * -0.004166666666666667
                      +in(i+-3,j+4) * 0.002232142857142857
                      +in(i+-2,j+-4) * -0.002232142857142857
                      +in(i+-2,j+-3) * -0.004166666666666667
                      +in(i+-2,j+-2) * -0.03125
                      +in(i+-2,j+-1) * -0.010416666666666666
                      +in(i+-2,j+0) * -0.010416666666666666
                      +in(i+-2,j+1) * -0.010416666666666666
                      +in(i+-2,j+3) * 0.004166666666666667
                      +in(i+-2,j+4) * 0.002232142857142857
                      +in(i+-1,j+-4) * -0.002232142857142857
                      +in(i+-1,j+-3) * -0.004166666666666667
                      +in(i+-1,j+-2) * -0.010416666666666666
                      +in(i+-1,j+-1) * -0.0625
                      +in(i+-1,j+0) * -0.0625
                      +in(i+-1,j+2) * 0.010416666666666666
                      +in(i+-1,j+3) * 0.004166666666666667
                      +in(i+-1,j+4) * 0.002232142857142857
                      +in(i+0,j+-4) * -0.002232142857142857
                      +in(i+0,j+-3) * -0.004166666666666667
                      +in(i+0,j+-2) * -0.010416666666666666
                      +in(i+0,j+-1) * -0.0625
                      +in(i+0,j+1) * 0.0625
                      +in(i+0,j+2) * 0.010416666666666666
                      +in(i+0,j+3) * 0.004166666666666667
                      +in(i+0,j+4) * 0.002232142857142857
                      +in(i+1,j+-4) * -0.002232142857142857
                      +in(i+1,j+-3) * -0.004166666666666667
                      +in(i+1,j+-2) * -0.010416666666666666
                      +in(i+1,j+0) * 0.0625
                      +in(i+1,j+1) * 0.0625
                      +in(i+1,j+2) * 0.010416666666666666
                      +in(i+1,j+3) * 0.004166666666666667
                      +in(i+1,j+4) * 0.002232142857142857
                      +in(i+2,j+-4) * -0.002232142857142857
                      +in(i+2,j+-3) * -0.004166666666666667
                      +in(i+2,j+-1) * 0.010416666666666666
                      +in(i+2,j+0) * 0.010416666666666666
                      +in(i+2,j+1) * 0.010416666666666666
                      +in(i+2,j+2) * 0.03125
                      +in(i+2,j+3) * 0.004166666666666667
                      +in(i+2,j+4) * 0.002232142857142857
                      +in(i+3,j+-4) * -0.002232142857142857
                      +in(i+3,j+-2) * 0.004166666666666667
                      +in(i+3,j+-1) * 0.004166666666666667
                      +in(i+3,j+0) * 0.004166666666666667
                      +in(i+3,j+1) * 0.004166666666666667
                      +in(i+3,j+2) * 0.004166666666666667
                      +in(i+3,j+3) * 0.020833333333333332
                      +in(i+3,j+4) * 0.002232142857142857
                      +in(i+4,j+-3) * 0.002232142857142857
                      +in(i+4,j+-2) * 0.002232142857142857
                      +in(i+4,j+-1) * 0.002232142857142857
                      +in(i+4,j+0) * 0.002232142857142857
                      +in(i+4,j+1) * 0.002232142857142857
                      +in(i+4,j+2) * 0.002232142857142857
                      +in(i+4,j+3) * 0.002232142857142857
                      +in(i+4,j+4) * 0.015625
                      ;
       }
     });
}

void grid5(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(5,n-5), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=5; j<n-5; ++j) {
        out(i,j) += +in(i+-5,j+-5) * -0.01
                      +in(i+-5,j+-4) * -0.0011111111111111111
                      +in(i+-5,j+-3) * -0.0011111111111111111
                      +in(i+-5,j+-2) * -0.0011111111111111111
                      +in(i+-5,j+-1) * -0.0011111111111111111
                      +in(i+-5,j+0) * -0.0011111111111111111
                      +in(i+-5,j+1) * -0.0011111111111111111
                      +in(i+-5,j+2) * -0.0011111111111111111
                      +in(i+-5,j+3) * -0.0011111111111111111
                      +in(i+-5,j+4) * -0.0011111111111111111
                      +in(i+-4,j+-5) * -0.0011111111111111111
                      +in(i+-4,j+-4) * -0.0125
                      +in(i+-4,j+-3) * -0.0017857142857142857
                      +in(i+-4,j+-2) * -0.0017857142857142857
                      +in(i+-4,j+-1) * -0.0017857142857142857
                      +in(i+-4,j+0) * -0.0017857142857142857
                      +in(i+-4,j+1) * -0.0017857142857142857
                      +in(i+-4,j+2) * -0.0017857142857142857
                      +in(i+-4,j+3) * -0.0017857142857142857
                      +in(i+-4,j+5) * 0.0011111111111111111
                      +in(i+-3,j+-5) * -0.0011111111111111111
                      +in(i+-3,j+-4) * -0.0017857142857142857
                      +in(i+-3,j+-3) * -0.016666666666666666
                      +in(i+-3,j+-2) * -0.0033333333333333335
                      +in(i+-3,j+-1) * -0.0033333333333333335
                      +in(i+-3,j+0) * -0.0033333333333333335
                      +in(i+-3,j+1) * -0.0033333333333333335
                      +in(i+-3,j+2) * -0.0033333333333333335
                      +in(i+-3,j+4) * 0.0017857142857142857
                      +in(i+-3,j+5) * 0.0011111111111111111
                      +in(i+-2,j+-5) * -0.0011111111111111111
                      +in(i+-2,j+-4) * -0.0017857142857142857
                      +in(i+-2,j+-3) * -0.0033333333333333335
                      +in(i+-2,j+-2) * -0.025
                      +in(i+-2,j+-1) * -0.008333333333333333
                      +in(i+-2,j+0) * -0.008333333333333333
                      +in(i+-2,j+1) * -0.008333333333333333
                      +in(i+-2,j+3) * 0.0033333333333333335
                      +in(i+-2,j+4) * 0.0017857142857142857
                      +in(i+-2,j+5) * 0.0011111111111111111
                      +in(i+-1,j+-5) * -0.0011111111111111111
                      +in(i+-1,j+-4) * -0.0017857142857142857
                      +in(i+-1,j+-3) * -0.0033333333333333335
                      +in(i+-1,j+-2) * -0.008333333333333333
                      +in(i+-1,j+-1) * -0.05
                      +in(i+-1,j+0) * -0.05
                      +in(i+-1,j+2) * 0.008333333333333333
                      +in(i+-1,j+3) * 0.0033333333333333335
                      +in(i+-1,j+4) * 0.0017857142857142857
                      +in(i+-1,j+5) * 0.0011111111111111111
                      +in(i+0,j+-5) * -0.0011111111111111111
                      +in(i+0,j+-4) * -0.0017857142857142857
                      +in(i+0,j+-3) * -0.0033333333333333335
                      +in(i+0,j+-2) * -0.008333333333333333
                      +in(i+0,j+-1) * -0.05
                      +in(i+0,j+1) * 0.05
                      +in(i+0,j+2) * 0.008333333333333333
                      +in(i+0,j+3) * 0.0033333333333333335
                      +in(i+0,j+4) * 0.0017857142857142857
                      +in(i+0,j+5) * 0.0011111111111111111
                      +in(i+1,j+-5) * -0.0011111111111111111
                      +in(i+1,j+-4) * -0.0017857142857142857
                      +in(i+1,j+-3) * -0.0033333333333333335
                      +in(i+1,j+-2) * -0.008333333333333333
                      +in(i+1,j+0) * 0.05
                      +in(i+1,j+1) * 0.05
                      +in(i+1,j+2) * 0.008333333333333333
                      +in(i+1,j+3) * 0.0033333333333333335
                      +in(i+1,j+4) * 0.0017857142857142857
                      +in(i+1,j+5) * 0.0011111111111111111
                      +in(i+2,j+-5) * -0.0011111111111111111
                      +in(i+2,j+-4) * -0.0017857142857142857
                      +in(i+2,j+-3) * -0.0033333333333333335
                      +in(i+2,j+-1) * 0.008333333333333333
                      +in(i+2,j+0) * 0.008333333333333333
                      +in(i+2,j+1) * 0.008333333333333333
                      +in(i+2,j+2) * 0.025
                      +in(i+2,j+3) * 0.0033333333333333335
                      +in(i+2,j+4) * 0.0017857142857142857
                      +in(i+2,j+5) * 0.0011111111111111111
                      +in(i+3,j+-5) * -0.0011111111111111111
                      +in(i+3,j+-4) * -0.0017857142857142857
                      +in(i+3,j+-2) * 0.0033333333333333335
                      +in(i+3,j+-1) * 0.0033333333333333335
                      +in(i+3,j+0) * 0.0033333333333333335
                      +in(i+3,j+1) * 0.0033333333333333335
                      +in(i+3,j+2) * 0.0033333333333333335
                      +in(i+3,j+3) * 0.016666666666666666
                      +in(i+3,j+4) * 0.0017857142857142857
                      +in(i+3,j+5) * 0.0011111111111111111
                      +in(i+4,j+-5) * -0.0011111111111111111
                      +in(i+4,j+-3) * 0.0017857142857142857
                      +in(i+4,j+-2) * 0.0017857142857142857
                      +in(i+4,j+-1) * 0.0017857142857142857
                      +in(i+4,j+0) * 0.0017857142857142857
                      +in(i+4,j+1) * 0.0017857142857142857
                      +in(i+4,j+2) * 0.0017857142857142857
                      +in(i+4,j+3) * 0.0017857142857142857
                      +in(i+4,j+4) * 0.0125
                      +in(i+4,j+5) * 0.0011111111111111111
                      +in(i+5,j+-4) * 0.0011111111111111111
                      +in(i+5,j+-3) * 0.0011111111111111111
                      +in(i+5,j+-2) * 0.0011111111111111111
                      +in(i+5,j+-1) * 0.0011111111111111111
                      +in(i+5,j+0) * 0.0011111111111111111
                      +in(i+5,j+1) * 0.0011111111111111111
                      +in(i+5,j+2) * 0.0011111111111111111
                      +in(i+5,j+3) * 0.0011111111111111111
                      +in(i+5,j+4) * 0.0011111111111111111
                      +in(i+5,j+5) * 0.01
                      ;
       }
     });
}

void grid6(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(6,n-6), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=6; j<n-6; ++j) {
        out(i,j) += +in(i+-6,j+-6) * -0.006944444444444444
                      +in(i+-6,j+-5) * -0.0006313131313131314
                      +in(i+-6,j+-4) * -0.0006313131313131314
                      +in(i+-6,j+-3) * -0.0006313131313131314
                      +in(i+-6,j+-2) * -0.0006313131313131314
                      +in(i+-6,j+-1) * -0.0006313131313131314
                      +in(i+-6,j+0) * -0.0006313131313131314
                      +in(i+-6,j+1) * -0.0006313131313131314
                      +in(i+-6,j+2) * -0.0006313131313131314
                      +in(i+-6,j+3) * -0.0006313131313131314
                      +in(i+-6,j+4) * -0.0006313131313131314
                      +in(i+-6,j+5) * -0.0006313131313131314
                      +in(i+-5,j+-6) * -0.0006313131313131314
                      +in(i+-5,j+-5) * -0.008333333333333333
                      +in(i+-5,j+-4) * -0.000925925925925926
                      +in(i+-5,j+-3) * -0.000925925925925926
                      +in(i+-5,j+-2) * -0.000925925925925926
                      +in(i+-5,j+-1) * -0.000925925925925926
                      +in(i+-5,j+0) * -0.000925925925925926
                      +in(i+-5,j+1) * -0.000925925925925926
                      +in(i+-5,j+2) * -0.000925925925925926
                      +in(i+-5,j+3) * -0.000925925925925926
                      +in(i+-5,j+4) * -0.000925925925925926
                      +in(i+-5,j+6) * 0.0006313131313131314
                      +in(i+-4,j+-6) * -0.0006313131313131314
                      +in(i+-4,j+-5) * -0.000925925925925926
                      +in(i+-4,j+-4) * -0.010416666666666666
                      +in(i+-4,j+-3) * -0.001488095238095238
                      +in(i+-4,j+-2) * -0.001488095238095238
                      +in(i+-4,j+-1) * -0.001488095238095238
                      +in(i+-4,j+0) * -0.001488095238095238
                      +in(i+-4,j+1) * -0.001488095238095238
                      +in(i+-4,j+2) * -0.001488095238095238
                      +in(i+-4,j+3) * -0.001488095238095238
                      +in(i+-4,j+5) * 0.000925925925925926
                      +in(i+-4,j+6) * 0.0006313131313131314
                      +in(i+-3,j+-6) * -0.0006313131313131314
                      +in(i+-3,j+-5) * -0.000925925925925926
                      +in(i+-3,j+-4) * -0.001488095238095238
                      +in(i+-3,j+-3) * -0.013888888888888888
                      +in(i+-3,j+-2) * -0.002777777777777778
                      +in(i+-3,j+-1) * -0.002777777777777778
                      +in(i+-3,j+0) * -0.002777777777777778
                      +in(i+-3,j+1) * -0.002777777777777778
                      +in(i+-3,j+2) * -0.002777777777777778
                      +in(i+-3,j+4) * 0.001488095238095238
                      +in(i+-3,j+5) * 0.000925925925925926
                      +in(i+-3,j+6) * 0.0006313131313131314
                      +in(i+-2,j+-6) * -0.0006313131313131314
                      +in(i+-2,j+-5) * -0.000925925925925926
                      +in(i+-2,j+-4) * -0.001488095238095238
                      +in(i+-2,j+-3) * -0.002777777777777778
                      +in(i+-2,j+-2) * -0.020833333333333332
                      +in(i+-2,j+-1) * -0.006944444444444444
                      +in(i+-2,j+0) * -0.006944444444444444
                      +in(i+-2,j+1) * -0.006944444444444444
                      +in(i+-2,j+3) * 0.002777777777777778
                      +in(i+-2,j+4) * 0.001488095238095238
                      +in(i+-2,j+5) * 0.000925925925925926
                      +in(i+-2,j+6) * 0.0006313131313131314
                      +in(i+-1,j+-6) * -0.0006313131313131314
                      +in(i+-1,j+-5) * -0.000925925925925926
                      +in(i+-1,j+-4) * -0.001488095238095238
                      +in(i+-1,j+-3) * -0.002777777777777778
                      +in(i+-1,j+-2) * -0.006944444444444444
                      +in(i+-1,j+-1) * -0.041666666666666664
                      +in(i+-1,j+0) * -0.041666666666666664
                      +in(i+-1,j+2) * 0.006944444444444444
                      +in(i+-1,j+3) * 0.002777777777777778
                      +in(i+-1,j+4) * 0.001488095238095238
                      +in(i+-1,j+5) * 0.000925925925925926
                      +in(i+-1,j+6) * 0.0006313131313131314
                      +in(i+0,j+-6) * -0.0006313131313131314
                      +in(i+0,j+-5) * -0.000925925925925926
                      +in(i+0,j+-4) * -0.001488095238095238
                      +in(i+0,j+-3) * -0.002777777777777778
                      +in(i+0,j+-2) * -0.006944444444444444
                      +in(i+0,j+-1) * -0.041666666666666664
                      +in(i+0,j+1) * 0.041666666666666664
                      +in(i+0,j+2) * 0.006944444444444444
                      +in(i+0,j+3) * 0.002777777777777778
                      +in(i+0,j+4) * 0.001488095238095238
                      +in(i+0,j+5) * 0.000925925925925926
                      +in(i+0,j+6) * 0.0006313131313131314
                      +in(i+1,j+-6) * -0.0006313131313131314
                      +in(i+1,j+-5) * -0.000925925925925926
                      +in(i+1,j+-4) * -0.001488095238095238
                      +in(i+1,j+-3) * -0.002777777777777778
                      +in(i+1,j+-2) * -0.006944444444444444
                      +in(i+1,j+0) * 0.041666666666666664
                      +in(i+1,j+1) * 0.041666666666666664
                      +in(i+1,j+2) * 0.006944444444444444
                      +in(i+1,j+3) * 0.002777777777777778
                      +in(i+1,j+4) * 0.001488095238095238
                      +in(i+1,j+5) * 0.000925925925925926
                      +in(i+1,j+6) * 0.0006313131313131314
                      +in(i+2,j+-6) * -0.0006313131313131314
                      +in(i+2,j+-5) * -0.000925925925925926
                      +in(i+2,j+-4) * -0.001488095238095238
                      +in(i+2,j+-3) * -0.002777777777777778
                      +in(i+2,j+-1) * 0.006944444444444444
                      +in(i+2,j+0) * 0.006944444444444444
                      +in(i+2,j+1) * 0.006944444444444444
                      +in(i+2,j+2) * 0.020833333333333332
                      +in(i+2,j+3) * 0.002777777777777778
                      +in(i+2,j+4) * 0.001488095238095238
                      +in(i+2,j+5) * 0.000925925925925926
                      +in(i+2,j+6) * 0.0006313131313131314
                      +in(i+3,j+-6) * -0.0006313131313131314
                      +in(i+3,j+-5) * -0.000925925925925926
                      +in(i+3,j+-4) * -0.001488095238095238
                      +in(i+3,j+-2) * 0.002777777777777778
                      +in(i+3,j+-1) * 0.002777777777777778
                      +in(i+3,j+0) * 0.002777777777777778
                      +in(i+3,j+1) * 0.002777777777777778
                      +in(i+3,j+2) * 0.002777777777777778
                      +in(i+3,j+3) * 0.013888888888888888
                      +in(i+3,j+4) * 0.001488095238095238
                      +in(i+3,j+5) * 0.000925925925925926
                      +in(i+3,j+6) * 0.0006313131313131314
                      +in(i+4,j+-6) * -0.0006313131313131314
                      +in(i+4,j+-5) * -0.000925925925925926
                      +in(i+4,j+-3) * 0.001488095238095238
                      +in(i+4,j+-2) * 0.001488095238095238
                      +in(i+4,j+-1) * 0.001488095238095238
                      +in(i+4,j+0) * 0.001488095238095238
                      +in(i+4,j+1) * 0.001488095238095238
                      +in(i+4,j+2) * 0.001488095238095238
                      +in(i+4,j+3) * 0.001488095238095238
                      +in(i+4,j+4) * 0.010416666666666666
                      +in(i+4,j+5) * 0.000925925925925926
                      +in(i+4,j+6) * 0.0006313131313131314
                      +in(i+5,j+-6) * -0.0006313131313131314
                      +in(i+5,j+-4) * 0.000925925925925926
                      +in(i+5,j+-3) * 0.000925925925925926
                      +in(i+5,j+-2) * 0.000925925925925926
                      +in(i+5,j+-1) * 0.000925925925925926
                      +in(i+5,j+0) * 0.000925925925925926
                      +in(i+5,j+1) * 0.000925925925925926
                      +in(i+5,j+2) * 0.000925925925925926
                      +in(i+5,j+3) * 0.000925925925925926
                      +in(i+5,j+4) * 0.000925925925925926
                      +in(i+5,j+5) * 0.008333333333333333
                      +in(i+5,j+6) * 0.0006313131313131314
                      +in(i+6,j+-5) * 0.0006313131313131314
                      +in(i+6,j+-4) * 0.0006313131313131314
                      +in(i+6,j+-3) * 0.0006313131313131314
                      +in(i+6,j+-2) * 0.0006313131313131314
                      +in(i+6,j+-1) * 0.0006313131313131314
                      +in(i+6,j+0) * 0.0006313131313131314
                      +in(i+6,j+1) * 0.0006313131313131314
                      +in(i+6,j+2) * 0.0006313131313131314
                      +in(i+6,j+3) * 0.0006313131313131314
                      +in(i+6,j+4) * 0.0006313131313131314
                      +in(i+6,j+5) * 0.0006313131313131314
                      +in(i+6,j+6) * 0.006944444444444444
                      ;
       }
     });
}

void grid7(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(7,n-7), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=7; j<n-7; ++j) {
        out(i,j) += +in(i+-7,j+-7) * -0.00510204081632653
                      +in(i+-7,j+-6) * -0.0003924646781789639
                      +in(i+-7,j+-5) * -0.0003924646781789639
                      +in(i+-7,j+-4) * -0.0003924646781789639
                      +in(i+-7,j+-3) * -0.0003924646781789639
                      +in(i+-7,j+-2) * -0.0003924646781789639
                      +in(i+-7,j+-1) * -0.0003924646781789639
                      +in(i+-7,j+0) * -0.0003924646781789639
                      +in(i+-7,j+1) * -0.0003924646781789639
                      +in(i+-7,j+2) * -0.0003924646781789639
                      +in(i+-7,j+3) * -0.0003924646781789639
                      +in(i+-7,j+4) * -0.0003924646781789639
                      +in(i+-7,j+5) * -0.0003924646781789639
                      +in(i+-7,j+6) * -0.0003924646781789639
                      +in(i+-6,j+-7) * -0.0003924646781789639
                      +in(i+-6,j+-6) * -0.005952380952380952
                      +in(i+-6,j+-5) * -0.0005411255411255411
                      +in(i+-6,j+-4) * -0.0005411255411255411
                      +in(i+-6,j+-3) * -0.0005411255411255411
                      +in(i+-6,j+-2) * -0.0005411255411255411
                      +in(i+-6,j+-1) * -0.0005411255411255411
                      +in(i+-6,j+0) * -0.0005411255411255411
                      +in(i+-6,j+1) * -0.0005411255411255411
                      +in(i+-6,j+2) * -0.0005411255411255411
                      +in(i+-6,j+3) * -0.0005411255411255411
                      +in(i+-6,j+4) * -0.0005411255411255411
                      +in(i+-6,j+5) * -0.0005411255411255411
                      +in(i+-6,j+7) * 0.0003924646781789639
                      +in(i+-5,j+-7) * -0.0003924646781789639
                      +in(i+-5,j+-6) * -0.0005411255411255411
                      +in(i+-5,j+-5) * -0.007142857142857143
                      +in(i+-5,j+-4) * -0.0007936507936507937
                      +in(i+-5,j+-3) * -0.0007936507936507937
                      +in(i+-5,j+-2) * -0.0007936507936507937
                      +in(i+-5,j+-1) * -0.0007936507936507937
                      +in(i+-5,j+0) * -0.0007936507936507937
                      +in(i+-5,j+1) * -0.0007936507936507937
                      +in(i+-5,j+2) * -0.0007936507936507937
                      +in(i+-5,j+3) * -0.0007936507936507937
                      +in(i+-5,j+4) * -0.0007936507936507937
                      +in(i+-5,j+6) * 0.0005411255411255411
                      +in(i+-5,j+7) * 0.0003924646781789639
                      +in(i+-4,j+-7) * -0.0003924646781789639
                      +in(i+-4,j+-6) * -0.0005411255411255411
                      +in(i+-4,j+-5) * -0.0007936507936507937
                      +in(i+-4,j+-4) * -0.008928571428571428
                      +in(i+-4,j+-3) * -0.0012755102040816326
                      +in(i+-4,j+-2) * -0.0012755102040816326
                      +in(i+-4,j+-1) * -0.0012755102040816326
                      +in(i+-4,j+0) * -0.0012755102040816326
                      +in(i+-4,j+1) * -0.0012755102040816326
                      +in(i+-4,j+2) * -0.0012755102040816326
                      +in(i+-4,j+3) * -0.0012755102040816326
                      +in(i+-4,j+5) * 0.0007936507936507937
                      +in(i+-4,j+6) * 0.0005411255411255411
                      +in(i+-4,j+7) * 0.0003924646781789639
                      +in(i+-3,j+-7) * -0.0003924646781789639
                      +in(i+-3,j+-6) * -0.0005411255411255411
                      +in(i+-3,j+-5) * -0.0007936507936507937
                      +in(i+-3,j+-4) * -0.0012755102040816326
                      +in(i+-3,j+-3) * -0.011904761904761904
                      +in(i+-3,j+-2) * -0.002380952380952381
                      +in(i+-3,j+-1) * -0.002380952380952381
                      +in(i+-3,j+0) * -0.002380952380952381
                      +in(i+-3,j+1) * -0.002380952380952381
                      +in(i+-3,j+2) * -0.002380952380952381
                      +in(i+-3,j+4) * 0.0012755102040816326
                      +in(i+-3,j+5) * 0.0007936507936507937
                      +in(i+-3,j+6) * 0.0005411255411255411
                      +in(i+-3,j+7) * 0.0003924646781789639
                      +in(i+-2,j+-7) * -0.0003924646781789639
                      +in(i+-2,j+-6) * -0.0005411255411255411
                      +in(i+-2,j+-5) * -0.0007936507936507937
                      +in(i+-2,j+-4) * -0.0012755102040816326
                      +in(i+-2,j+-3) * -0.002380952380952381
                      +in(i+-2,j+-2) * -0.017857142857142856
                      +in(i+-2,j+-1) * -0.005952380952380952
                      +in(i+-2,j+0) * -0.005952380952380952
                      +in(i+-2,j+1) * -0.005952380952380952
                      +in(i+-2,j+3) * 0.002380952380952381
                      +in(i+-2,j+4) * 0.0012755102040816326
                      +in(i+-2,j+5) * 0.0007936507936507937
                      +in(i+-2,j+6) * 0.0005411255411255411
                      +in(i+-2,j+7) * 0.0003924646781789639
                      +in(i+-1,j+-7) * -0.0003924646781789639
                      +in(i+-1,j+-6) * -0.0005411255411255411
                      +in(i+-1,j+-5) * -0.0007936507936507937
                      +in(i+-1,j+-4) * -0.0012755102040816326
                      +in(i+-1,j+-3) * -0.002380952380952381
                      +in(i+-1,j+-2) * -0.005952380952380952
                      +in(i+-1,j+-1) * -0.03571428571428571
                      +in(i+-1,j+0) * -0.03571428571428571
                      +in(i+-1,j+2) * 0.005952380952380952
                      +in(i+-1,j+3) * 0.002380952380952381
                      +in(i+-1,j+4) * 0.0012755102040816326
                      +in(i+-1,j+5) * 0.0007936507936507937
                      +in(i+-1,j+6) * 0.0005411255411255411
                      +in(i+-1,j+7) * 0.0003924646781789639
                      +in(i+0,j+-7) * -0.0003924646781789639
                      +in(i+0,j+-6) * -0.0005411255411255411
                      +in(i+0,j+-5) * -0.0007936507936507937
                      +in(i+0,j+-4) * -0.0012755102040816326
                      +in(i+0,j+-3) * -0.002380952380952381
                      +in(i+0,j+-2) * -0.005952380952380952
                      +in(i+0,j+-1) * -0.03571428571428571
                      +in(i+0,j+1) * 0.03571428571428571
                      +in(i+0,j+2) * 0.005952380952380952
                      +in(i+0,j+3) * 0.002380952380952381
                      +in(i+0,j+4) * 0.0012755102040816326
                      +in(i+0,j+5) * 0.0007936507936507937
                      +in(i+0,j+6) * 0.0005411255411255411
                      +in(i+0,j+7) * 0.0003924646781789639
                      +in(i+1,j+-7) * -0.0003924646781789639
                      +in(i+1,j+-6) * -0.0005411255411255411
                      +in(i+1,j+-5) * -0.0007936507936507937
                      +in(i+1,j+-4) * -0.0012755102040816326
                      +in(i+1,j+-3) * -0.002380952380952381
                      +in(i+1,j+-2) * -0.005952380952380952
                      +in(i+1,j+0) * 0.03571428571428571
                      +in(i+1,j+1) * 0.03571428571428571
                      +in(i+1,j+2) * 0.005952380952380952
                      +in(i+1,j+3) * 0.002380952380952381
                      +in(i+1,j+4) * 0.0012755102040816326
                      +in(i+1,j+5) * 0.0007936507936507937
                      +in(i+1,j+6) * 0.0005411255411255411
                      +in(i+1,j+7) * 0.0003924646781789639
                      +in(i+2,j+-7) * -0.0003924646781789639
                      +in(i+2,j+-6) * -0.0005411255411255411
                      +in(i+2,j+-5) * -0.0007936507936507937
                      +in(i+2,j+-4) * -0.0012755102040816326
                      +in(i+2,j+-3) * -0.002380952380952381
                      +in(i+2,j+-1) * 0.005952380952380952
                      +in(i+2,j+0) * 0.005952380952380952
                      +in(i+2,j+1) * 0.005952380952380952
                      +in(i+2,j+2) * 0.017857142857142856
                      +in(i+2,j+3) * 0.002380952380952381
                      +in(i+2,j+4) * 0.0012755102040816326
                      +in(i+2,j+5) * 0.0007936507936507937
                      +in(i+2,j+6) * 0.0005411255411255411
                      +in(i+2,j+7) * 0.0003924646781789639
                      +in(i+3,j+-7) * -0.0003924646781789639
                      +in(i+3,j+-6) * -0.0005411255411255411
                      +in(i+3,j+-5) * -0.0007936507936507937
                      +in(i+3,j+-4) * -0.0012755102040816326
                      +in(i+3,j+-2) * 0.002380952380952381
                      +in(i+3,j+-1) * 0.002380952380952381
                      +in(i+3,j+0) * 0.002380952380952381
                      +in(i+3,j+1) * 0.002380952380952381
                      +in(i+3,j+2) * 0.002380952380952381
                      +in(i+3,j+3) * 0.011904761904761904
                      +in(i+3,j+4) * 0.0012755102040816326
                      +in(i+3,j+5) * 0.0007936507936507937
                      +in(i+3,j+6) * 0.0005411255411255411
                      +in(i+3,j+7) * 0.0003924646781789639
                      +in(i+4,j+-7) * -0.0003924646781789639
                      +in(i+4,j+-6) * -0.0005411255411255411
                      +in(i+4,j+-5) * -0.0007936507936507937
                      +in(i+4,j+-3) * 0.0012755102040816326
                      +in(i+4,j+-2) * 0.0012755102040816326
                      +in(i+4,j+-1) * 0.0012755102040816326
                      +in(i+4,j+0) * 0.0012755102040816326
                      +in(i+4,j+1) * 0.0012755102040816326
                      +in(i+4,j+2) * 0.0012755102040816326
                      +in(i+4,j+3) * 0.0012755102040816326
                      +in(i+4,j+4) * 0.008928571428571428
                      +in(i+4,j+5) * 0.0007936507936507937
                      +in(i+4,j+6) * 0.0005411255411255411
                      +in(i+4,j+7) * 0.0003924646781789639
                      +in(i+5,j+-7) * -0.0003924646781789639
                      +in(i+5,j+-6) * -0.0005411255411255411
                      +in(i+5,j+-4) * 0.0007936507936507937
                      +in(i+5,j+-3) * 0.0007936507936507937
                      +in(i+5,j+-2) * 0.0007936507936507937
                      +in(i+5,j+-1) * 0.0007936507936507937
                      +in(i+5,j+0) * 0.0007936507936507937
                      +in(i+5,j+1) * 0.0007936507936507937
                      +in(i+5,j+2) * 0.0007936507936507937
                      +in(i+5,j+3) * 0.0007936507936507937
                      +in(i+5,j+4) * 0.0007936507936507937
                      +in(i+5,j+5) * 0.007142857142857143
                      +in(i+5,j+6) * 0.0005411255411255411
                      +in(i+5,j+7) * 0.0003924646781789639
                      +in(i+6,j+-7) * -0.0003924646781789639
                      +in(i+6,j+-5) * 0.0005411255411255411
                      +in(i+6,j+-4) * 0.0005411255411255411
                      +in(i+6,j+-3) * 0.0005411255411255411
                      +in(i+6,j+-2) * 0.0005411255411255411
                      +in(i+6,j+-1) * 0.0005411255411255411
                      +in(i+6,j+0) * 0.0005411255411255411
                      +in(i+6,j+1) * 0.0005411255411255411
                      +in(i+6,j+2) * 0.0005411255411255411
                      +in(i+6,j+3) * 0.0005411255411255411
                      +in(i+6,j+4) * 0.0005411255411255411
                      +in(i+6,j+5) * 0.0005411255411255411
                      +in(i+6,j+6) * 0.005952380952380952
                      +in(i+6,j+7) * 0.0003924646781789639
                      +in(i+7,j+-6) * 0.0003924646781789639
                      +in(i+7,j+-5) * 0.0003924646781789639
                      +in(i+7,j+-4) * 0.0003924646781789639
                      +in(i+7,j+-3) * 0.0003924646781789639
                      +in(i+7,j+-2) * 0.0003924646781789639
                      +in(i+7,j+-1) * 0.0003924646781789639
                      +in(i+7,j+0) * 0.0003924646781789639
                      +in(i+7,j+1) * 0.0003924646781789639
                      +in(i+7,j+2) * 0.0003924646781789639
                      +in(i+7,j+3) * 0.0003924646781789639
                      +in(i+7,j+4) * 0.0003924646781789639
                      +in(i+7,j+5) * 0.0003924646781789639
                      +in(i+7,j+6) * 0.0003924646781789639
                      +in(i+7,j+7) * 0.00510204081632653
                      ;
       }
     });
}

void grid8(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(8,n-8), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=8; j<n-8; ++j) {
        out(i,j) += +in(i+-8,j+-8) * -0.00390625
                      +in(i+-8,j+-7) * -0.00026041666666666666
                      +in(i+-8,j+-6) * -0.00026041666666666666
                      +in(i+-8,j+-5) * -0.00026041666666666666
                      +in(i+-8,j+-4) * -0.00026041666666666666
                      +in(i+-8,j+-3) * -0.00026041666666666666
                      +in(i+-8,j+-2) * -0.00026041666666666666
                      +in(i+-8,j+-1) * -0.00026041666666666666
                      +in(i+-8,j+0) * -0.00026041666666666666
                      +in(i+-8,j+1) * -0.00026041666666666666
                      +in(i+-8,j+2) * -0.00026041666666666666
                      +in(i+-8,j+3) * -0.00026041666666666666
                      +in(i+-8,j+4) * -0.00026041666666666666
                      +in(i+-8,j+5) * -0.00026041666666666666
                      +in(i+-8,j+6) * -0.00026041666666666666
                      +in(i+-8,j+7) * -0.00026041666666666666
                      +in(i+-7,j+-8) * -0.00026041666666666666
                      +in(i+-7,j+-7) * -0.004464285714285714
                      +in(i+-7,j+-6) * -0.00034340659340659343
                      +in(i+-7,j+-5) * -0.00034340659340659343
                      +in(i+-7,j+-4) * -0.00034340659340659343
                      +in(i+-7,j+-3) * -0.00034340659340659343
                      +in(i+-7,j+-2) * -0.00034340659340659343
                      +in(i+-7,j+-1) * -0.00034340659340659343
                      +in(i+-7,j+0) * -0.00034340659340659343
                      +in(i+-7,j+1) * -0.00034340659340659343
                      +in(i+-7,j+2) * -0.00034340659340659343
                      +in(i+-7,j+3) * -0.00034340659340659343
                      +in(i+-7,j+4) * -0.00034340659340659343
                      +in(i+-7,j+5) * -0.00034340659340659343
                      +in(i+-7,j+6) * -0.00034340659340659343
                      +in(i+-7,j+8) * 0.00026041666666666666
                      +in(i+-6,j+-8) * -0.00026041666666666666
                      +in(i+-6,j+-7) * -0.00034340659340659343
                      +in(i+-6,j+-6) * -0.005208333333333333
                      +in(i+-6,j+-5) * -0.0004734848484848485
                      +in(i+-6,j+-4) * -0.0004734848484848485
                      +in(i+-6,j+-3) * -0.0004734848484848485
                      +in(i+-6,j+-2) * -0.0004734848484848485
                      +in(i+-6,j+-1) * -0.0004734848484848485
                      +in(i+-6,j+0) * -0.0004734848484848485
                      +in(i+-6,j+1) * -0.0004734848484848485
                      +in(i+-6,j+2) * -0.0004734848484848485
                      +in(i+-6,j+3) * -0.0004734848484848485
                      +in(i+-6,j+4) * -0.0004734848484848485
                      +in(i+-6,j+5) * -0.0004734848484848485
                      +in(i+-6,j+7) * 0.00034340659340659343
                      +in(i+-6,j+8) * 0.00026041666666666666
                      +in(i+-5,j+-8) * -0.00026041666666666666
                      +in(i+-5,j+-7) * -0.00034340659340659343
                      +in(i+-5,j+-6) * -0.0004734848484848485
                      +in(i+-5,j+-5) * -0.00625
                      +in(i+-5,j+-4) * -0.0006944444444444445
                      +in(i+-5,j+-3) * -0.0006944444444444445
                      +in(i+-5,j+-2) * -0.0006944444444444445
                      +in(i+-5,j+-1) * -0.0006944444444444445
                      +in(i+-5,j+0) * -0.0006944444444444445
                      +in(i+-5,j+1) * -0.0006944444444444445
                      +in(i+-5,j+2) * -0.0006944444444444445
                      +in(i+-5,j+3) * -0.0006944444444444445
                      +in(i+-5,j+4) * -0.0006944444444444445
                      +in(i+-5,j+6) * 0.0004734848484848485
                      +in(i+-5,j+7) * 0.00034340659340659343
                      +in(i+-5,j+8) * 0.00026041666666666666
                      +in(i+-4,j+-8) * -0.00026041666666666666
                      +in(i+-4,j+-7) * -0.00034340659340659343
                      +in(i+-4,j+-6) * -0.0004734848484848485
                      +in(i+-4,j+-5) * -0.0006944444444444445
                      +in(i+-4,j+-4) * -0.0078125
                      +in(i+-4,j+-3) * -0.0011160714285714285
                      +in(i+-4,j+-2) * -0.0011160714285714285
                      +in(i+-4,j+-1) * -0.0011160714285714285
                      +in(i+-4,j+0) * -0.0011160714285714285
                      +in(i+-4,j+1) * -0.0011160714285714285
                      +in(i+-4,j+2) * -0.0011160714285714285
                      +in(i+-4,j+3) * -0.0011160714285714285
                      +in(i+-4,j+5) * 0.0006944444444444445
                      +in(i+-4,j+6) * 0.0004734848484848485
                      +in(i+-4,j+7) * 0.00034340659340659343
                      +in(i+-4,j+8) * 0.00026041666666666666
                      +in(i+-3,j+-8) * -0.00026041666666666666
                      +in(i+-3,j+-7) * -0.00034340659340659343
                      +in(i+-3,j+-6) * -0.0004734848484848485
                      +in(i+-3,j+-5) * -0.0006944444444444445
                      +in(i+-3,j+-4) * -0.0011160714285714285
                      +in(i+-3,j+-3) * -0.010416666666666666
                      +in(i+-3,j+-2) * -0.0020833333333333333
                      +in(i+-3,j+-1) * -0.0020833333333333333
                      +in(i+-3,j+0) * -0.0020833333333333333
                      +in(i+-3,j+1) * -0.0020833333333333333
                      +in(i+-3,j+2) * -0.0020833333333333333
                      +in(i+-3,j+4) * 0.0011160714285714285
                      +in(i+-3,j+5) * 0.0006944444444444445
                      +in(i+-3,j+6) * 0.0004734848484848485
                      +in(i+-3,j+7) * 0.00034340659340659343
                      +in(i+-3,j+8) * 0.00026041666666666666
                      +in(i+-2,j+-8) * -0.00026041666666666666
                      +in(i+-2,j+-7) * -0.00034340659340659343
                      +in(i+-2,j+-6) * -0.0004734848484848485
                      +in(i+-2,j+-5) * -0.0006944444444444445
                      +in(i+-2,j+-4) * -0.0011160714285714285
                      +in(i+-2,j+-3) * -0.0020833333333333333
                      +in(i+-2,j+-2) * -0.015625
                      +in(i+-2,j+-1) * -0.005208333333333333
                      +in(i+-2,j+0) * -0.005208333333333333
                      +in(i+-2,j+1) * -0.005208333333333333
                      +in(i+-2,j+3) * 0.0020833333333333333
                      +in(i+-2,j+4) * 0.0011160714285714285
                      +in(i+-2,j+5) * 0.0006944444444444445
                      +in(i+-2,j+6) * 0.0004734848484848485
                      +in(i+-2,j+7) * 0.00034340659340659343
                      +in(i+-2,j+8) * 0.00026041666666666666
                      +in(i+-1,j+-8) * -0.00026041666666666666
                      +in(i+-1,j+-7) * -0.00034340659340659343
                      +in(i+-1,j+-6) * -0.0004734848484848485
                      +in(i+-1,j+-5) * -0.0006944444444444445
                      +in(i+-1,j+-4) * -0.0011160714285714285
                      +in(i+-1,j+-3) * -0.0020833333333333333
                      +in(i+-1,j+-2) * -0.005208333333333333
                      +in(i+-1,j+-1) * -0.03125
                      +in(i+-1,j+0) * -0.03125
                      +in(i+-1,j+2) * 0.005208333333333333
                      +in(i+-1,j+3) * 0.0020833333333333333
                      +in(i+-1,j+4) * 0.0011160714285714285
                      +in(i+-1,j+5) * 0.0006944444444444445
                      +in(i+-1,j+6) * 0.0004734848484848485
                      +in(i+-1,j+7) * 0.00034340659340659343
                      +in(i+-1,j+8) * 0.00026041666666666666
                      +in(i+0,j+-8) * -0.00026041666666666666
                      +in(i+0,j+-7) * -0.00034340659340659343
                      +in(i+0,j+-6) * -0.0004734848484848485
                      +in(i+0,j+-5) * -0.0006944444444444445
                      +in(i+0,j+-4) * -0.0011160714285714285
                      +in(i+0,j+-3) * -0.0020833333333333333
                      +in(i+0,j+-2) * -0.005208333333333333
                      +in(i+0,j+-1) * -0.03125
                      +in(i+0,j+1) * 0.03125
                      +in(i+0,j+2) * 0.005208333333333333
                      +in(i+0,j+3) * 0.0020833333333333333
                      +in(i+0,j+4) * 0.0011160714285714285
                      +in(i+0,j+5) * 0.0006944444444444445
                      +in(i+0,j+6) * 0.0004734848484848485
                      +in(i+0,j+7) * 0.00034340659340659343
                      +in(i+0,j+8) * 0.00026041666666666666
                      +in(i+1,j+-8) * -0.00026041666666666666
                      +in(i+1,j+-7) * -0.00034340659340659343
                      +in(i+1,j+-6) * -0.0004734848484848485
                      +in(i+1,j+-5) * -0.0006944444444444445
                      +in(i+1,j+-4) * -0.0011160714285714285
                      +in(i+1,j+-3) * -0.0020833333333333333
                      +in(i+1,j+-2) * -0.005208333333333333
                      +in(i+1,j+0) * 0.03125
                      +in(i+1,j+1) * 0.03125
                      +in(i+1,j+2) * 0.005208333333333333
                      +in(i+1,j+3) * 0.0020833333333333333
                      +in(i+1,j+4) * 0.0011160714285714285
                      +in(i+1,j+5) * 0.0006944444444444445
                      +in(i+1,j+6) * 0.0004734848484848485
                      +in(i+1,j+7) * 0.00034340659340659343
                      +in(i+1,j+8) * 0.00026041666666666666
                      +in(i+2,j+-8) * -0.00026041666666666666
                      +in(i+2,j+-7) * -0.00034340659340659343
                      +in(i+2,j+-6) * -0.0004734848484848485
                      +in(i+2,j+-5) * -0.0006944444444444445
                      +in(i+2,j+-4) * -0.0011160714285714285
                      +in(i+2,j+-3) * -0.0020833333333333333
                      +in(i+2,j+-1) * 0.005208333333333333
                      +in(i+2,j+0) * 0.005208333333333333
                      +in(i+2,j+1) * 0.005208333333333333
                      +in(i+2,j+2) * 0.015625
                      +in(i+2,j+3) * 0.0020833333333333333
                      +in(i+2,j+4) * 0.0011160714285714285
                      +in(i+2,j+5) * 0.0006944444444444445
                      +in(i+2,j+6) * 0.0004734848484848485
                      +in(i+2,j+7) * 0.00034340659340659343
                      +in(i+2,j+8) * 0.00026041666666666666
                      +in(i+3,j+-8) * -0.00026041666666666666
                      +in(i+3,j+-7) * -0.00034340659340659343
                      +in(i+3,j+-6) * -0.0004734848484848485
                      +in(i+3,j+-5) * -0.0006944444444444445
                      +in(i+3,j+-4) * -0.0011160714285714285
                      +in(i+3,j+-2) * 0.0020833333333333333
                      +in(i+3,j+-1) * 0.0020833333333333333
                      +in(i+3,j+0) * 0.0020833333333333333
                      +in(i+3,j+1) * 0.0020833333333333333
                      +in(i+3,j+2) * 0.0020833333333333333
                      +in(i+3,j+3) * 0.010416666666666666
                      +in(i+3,j+4) * 0.0011160714285714285
                      +in(i+3,j+5) * 0.0006944444444444445
                      +in(i+3,j+6) * 0.0004734848484848485
                      +in(i+3,j+7) * 0.00034340659340659343
                      +in(i+3,j+8) * 0.00026041666666666666
                      +in(i+4,j+-8) * -0.00026041666666666666
                      +in(i+4,j+-7) * -0.00034340659340659343
                      +in(i+4,j+-6) * -0.0004734848484848485
                      +in(i+4,j+-5) * -0.0006944444444444445
                      +in(i+4,j+-3) * 0.0011160714285714285
                      +in(i+4,j+-2) * 0.0011160714285714285
                      +in(i+4,j+-1) * 0.0011160714285714285
                      +in(i+4,j+0) * 0.0011160714285714285
                      +in(i+4,j+1) * 0.0011160714285714285
                      +in(i+4,j+2) * 0.0011160714285714285
                      +in(i+4,j+3) * 0.0011160714285714285
                      +in(i+4,j+4) * 0.0078125
                      +in(i+4,j+5) * 0.0006944444444444445
                      +in(i+4,j+6) * 0.0004734848484848485
                      +in(i+4,j+7) * 0.00034340659340659343
                      +in(i+4,j+8) * 0.00026041666666666666
                      +in(i+5,j+-8) * -0.00026041666666666666
                      +in(i+5,j+-7) * -0.00034340659340659343
                      +in(i+5,j+-6) * -0.0004734848484848485
                      +in(i+5,j+-4) * 0.0006944444444444445
                      +in(i+5,j+-3) * 0.0006944444444444445
                      +in(i+5,j+-2) * 0.0006944444444444445
                      +in(i+5,j+-1) * 0.0006944444444444445
                      +in(i+5,j+0) * 0.0006944444444444445
                      +in(i+5,j+1) * 0.0006944444444444445
                      +in(i+5,j+2) * 0.0006944444444444445
                      +in(i+5,j+3) * 0.0006944444444444445
                      +in(i+5,j+4) * 0.0006944444444444445
                      +in(i+5,j+5) * 0.00625
                      +in(i+5,j+6) * 0.0004734848484848485
                      +in(i+5,j+7) * 0.00034340659340659343
                      +in(i+5,j+8) * 0.00026041666666666666
                      +in(i+6,j+-8) * -0.00026041666666666666
                      +in(i+6,j+-7) * -0.00034340659340659343
                      +in(i+6,j+-5) * 0.0004734848484848485
                      +in(i+6,j+-4) * 0.0004734848484848485
                      +in(i+6,j+-3) * 0.0004734848484848485
                      +in(i+6,j+-2) * 0.0004734848484848485
                      +in(i+6,j+-1) * 0.0004734848484848485
                      +in(i+6,j+0) * 0.0004734848484848485
                      +in(i+6,j+1) * 0.0004734848484848485
                      +in(i+6,j+2) * 0.0004734848484848485
                      +in(i+6,j+3) * 0.0004734848484848485
                      +in(i+6,j+4) * 0.0004734848484848485
                      +in(i+6,j+5) * 0.0004734848484848485
                      +in(i+6,j+6) * 0.005208333333333333
                      +in(i+6,j+7) * 0.00034340659340659343
                      +in(i+6,j+8) * 0.00026041666666666666
                      +in(i+7,j+-8) * -0.00026041666666666666
                      +in(i+7,j+-6) * 0.00034340659340659343
                      +in(i+7,j+-5) * 0.00034340659340659343
                      +in(i+7,j+-4) * 0.00034340659340659343
                      +in(i+7,j+-3) * 0.00034340659340659343
                      +in(i+7,j+-2) * 0.00034340659340659343
                      +in(i+7,j+-1) * 0.00034340659340659343
                      +in(i+7,j+0) * 0.00034340659340659343
                      +in(i+7,j+1) * 0.00034340659340659343
                      +in(i+7,j+2) * 0.00034340659340659343
                      +in(i+7,j+3) * 0.00034340659340659343
                      +in(i+7,j+4) * 0.00034340659340659343
                      +in(i+7,j+5) * 0.00034340659340659343
                      +in(i+7,j+6) * 0.00034340659340659343
                      +in(i+7,j+7) * 0.004464285714285714
                      +in(i+7,j+8) * 0.00026041666666666666
                      +in(i+8,j+-7) * 0.00026041666666666666
                      +in(i+8,j+-6) * 0.00026041666666666666
                      +in(i+8,j+-5) * 0.00026041666666666666
                      +in(i+8,j+-4) * 0.00026041666666666666
                      +in(i+8,j+-3) * 0.00026041666666666666
                      +in(i+8,j+-2) * 0.00026041666666666666
                      +in(i+8,j+-1) * 0.00026041666666666666
                      +in(i+8,j+0) * 0.00026041666666666666
                      +in(i+8,j+1) * 0.00026041666666666666
                      +in(i+8,j+2) * 0.00026041666666666666
                      +in(i+8,j+3) * 0.00026041666666666666
                      +in(i+8,j+4) * 0.00026041666666666666
                      +in(i+8,j+5) * 0.00026041666666666666
                      +in(i+8,j+6) * 0.00026041666666666666
                      +in(i+8,j+7) * 0.00026041666666666666
                      +in(i+8,j+8) * 0.00390625
                      ;
       }
     });
}

void grid9(const int n, matrix & in, matrix & out) {
    Kokkos::parallel_for ( Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(9,n-9), KOKKOS_LAMBDA(const int i) {
      PRAGMA_SIMD
      for (auto j=9; j<n-9; ++j) {
        out(i,j) += +in(i+-9,j+-9) * -0.0030864197530864196
                      +in(i+-9,j+-8) * -0.00018155410312273057
                      +in(i+-9,j+-7) * -0.00018155410312273057
                      +in(i+-9,j+-6) * -0.00018155410312273057
                      +in(i+-9,j+-5) * -0.00018155410312273057
                      +in(i+-9,j+-4) * -0.00018155410312273057
                      +in(i+-9,j+-3) * -0.00018155410312273057
                      +in(i+-9,j+-2) * -0.00018155410312273057
                      +in(i+-9,j+-1) * -0.00018155410312273057
                      +in(i+-9,j+0) * -0.00018155410312273057
                      +in(i+-9,j+1) * -0.00018155410312273057
                      +in(i+-9,j+2) * -0.00018155410312273057
                      +in(i+-9,j+3) * -0.00018155410312273057
                      +in(i+-9,j+4) * -0.00018155410312273057
                      +in(i+-9,j+5) * -0.00018155410312273057
                      +in(i+-9,j+6) * -0.00018155410312273057
                      +in(i+-9,j+7) * -0.00018155410312273057
                      +in(i+-9,j+8) * -0.00018155410312273057
                      +in(i+-8,j+-9) * -0.00018155410312273057
                      +in(i+-8,j+-8) * -0.003472222222222222
                      +in(i+-8,j+-7) * -0.0002314814814814815
                      +in(i+-8,j+-6) * -0.0002314814814814815
                      +in(i+-8,j+-5) * -0.0002314814814814815
                      +in(i+-8,j+-4) * -0.0002314814814814815
                      +in(i+-8,j+-3) * -0.0002314814814814815
                      +in(i+-8,j+-2) * -0.0002314814814814815
                      +in(i+-8,j+-1) * -0.0002314814814814815
                      +in(i+-8,j+0) * -0.0002314814814814815
                      +in(i+-8,j+1) * -0.0002314814814814815
                      +in(i+-8,j+2) * -0.0002314814814814815
                      +in(i+-8,j+3) * -0.0002314814814814815
                      +in(i+-8,j+4) * -0.0002314814814814815
                      +in(i+-8,j+5) * -0.0002314814814814815
                      +in(i+-8,j+6) * -0.0002314814814814815
                      +in(i+-8,j+7) * -0.0002314814814814815
                      +in(i+-8,j+9) * 0.00018155410312273057
                      +in(i+-7,j+-9) * -0.00018155410312273057
                      +in(i+-7,j+-8) * -0.0002314814814814815
                      +in(i+-7,j+-7) * -0.003968253968253968
                      +in(i+-7,j+-6) * -0.00030525030525030525
                      +in(i+-7,j+-5) * -0.00030525030525030525
                      +in(i+-7,j+-4) * -0.00030525030525030525
                      +in(i+-7,j+-3) * -0.00030525030525030525
                      +in(i+-7,j+-2) * -0.00030525030525030525
                      +in(i+-7,j+-1) * -0.00030525030525030525
                      +in(i+-7,j+0) * -0.00030525030525030525
                      +in(i+-7,j+1) * -0.00030525030525030525
                      +in(i+-7,j+2) * -0.00030525030525030525
                      +in(i+-7,j+3) * -0.00030525030525030525
                      +in(i+-7,j+4) * -0.00030525030525030525
                      +in(i+-7,j+5) * -0.00030525030525030525
                      +in(i+-7,j+6) * -0.00030525030525030525
                      +in(i+-7,j+8) * 0.0002314814814814815
                      +in(i+-7,j+9) * 0.00018155410312273057
                      +in(i+-6,j+-9) * -0.00018155410312273057
                      +in(i+-6,j+-8) * -0.0002314814814814815
                      +in(i+-6,j+-7) * -0.00030525030525030525
                      +in(i+-6,j+-6) * -0.004629629629629629
                      +in(i+-6,j+-5) * -0.00042087542087542086
                      +in(i+-6,j+-4) * -0.00042087542087542086
                      +in(i+-6,j+-3) * -0.00042087542087542086
                      +in(i+-6,j+-2) * -0.00042087542087542086
                      +in(i+-6,j+-1) * -0.00042087542087542086
                      +in(i+-6,j+0) * -0.00042087542087542086
                      +in(i+-6,j+1) * -0.00042087542087542086
                      +in(i+-6,j+2) * -0.00042087542087542086
                      +in(i+-6,j+3) * -0.00042087542087542086
                      +in(i+-6,j+4) * -0.00042087542087542086
                      +in(i+-6,j+5) * -0.00042087542087542086
                      +in(i+-6,j+7) * 0.00030525030525030525
                      +in(i+-6,j+8) * 0.0002314814814814815
                      +in(i+-6,j+9) * 0.00018155410312273057
                      +in(i+-5,j+-9) * -0.00018155410312273057
                      +in(i+-5,j+-8) * -0.0002314814814814815
                      +in(i+-5,j+-7) * -0.00030525030525030525
                      +in(i+-5,j+-6) * -0.00042087542087542086
                      +in(i+-5,j+-5) * -0.005555555555555556
                      +in(i+-5,j+-4) * -0.0006172839506172839
                      +in(i+-5,j+-3) * -0.0006172839506172839
                      +in(i+-5,j+-2) * -0.0006172839506172839
                      +in(i+-5,j+-1) * -0.0006172839506172839
                      +in(i+-5,j+0) * -0.0006172839506172839
                      +in(i+-5,j+1) * -0.0006172839506172839
                      +in(i+-5,j+2) * -0.0006172839506172839
                      +in(i+-5,j+3) * -0.0006172839506172839
                      +in(i+-5,j+4) * -0.0006172839506172839
                      +in(i+-5,j+6) * 0.00042087542087542086
                      +in(i+-5,j+7) * 0.00030525030525030525
                      +in(i+-5,j+8) * 0.0002314814814814815
                      +in(i+-5,j+9) * 0.00018155410312273057
                      +in(i+-4,j+-9) * -0.00018155410312273057
                      +in(i+-4,j+-8) * -0.0002314814814814815
                      +in(i+-4,j+-7) * -0.00030525030525030525
                      +in(i+-4,j+-6) * -0.00042087542087542086
                      +in(i+-4,j+-5) * -0.0006172839506172839
                      +in(i+-4,j+-4) * -0.006944444444444444
                      +in(i+-4,j+-3) * -0.000992063492063492
                      +in(i+-4,j+-2) * -0.000992063492063492
                      +in(i+-4,j+-1) * -0.000992063492063492
                      +in(i+-4,j+0) * -0.000992063492063492
                      +in(i+-4,j+1) * -0.000992063492063492
                      +in(i+-4,j+2) * -0.000992063492063492
                      +in(i+-4,j+3) * -0.000992063492063492
                      +in(i+-4,j+5) * 0.0006172839506172839
                      +in(i+-4,j+6) * 0.00042087542087542086
                      +in(i+-4,j+7) * 0.00030525030525030525
                      +in(i+-4,j+8) * 0.0002314814814814815
                      +in(i+-4,j+9) * 0.00018155410312273057
                      +in(i+-3,j+-9) * -0.00018155410312273057
                      +in(i+-3,j+-8) * -0.0002314814814814815
                      +in(i+-3,j+-7) * -0.00030525030525030525
                      +in(i+-3,j+-6) * -0.00042087542087542086
                      +in(i+-3,j+-5) * -0.0006172839506172839
                      +in(i+-3,j+-4) * -0.000992063492063492
                      +in(i+-3,j+-3) * -0.009259259259259259
                      +in(i+-3,j+-2) * -0.001851851851851852
                      +in(i+-3,j+-1) * -0.001851851851851852
                      +in(i+-3,j+0) * -0.001851851851851852
                      +in(i+-3,j+1) * -0.001851851851851852
                      +in(i+-3,j+2) * -0.001851851851851852
                      +in(i+-3,j+4) * 0.000992063492063492
                      +in(i+-3,j+5) * 0.0006172839506172839
                      +in(i+-3,j+6) * 0.00042087542087542086
                      +in(i+-3,j+7) * 0.00030525030525030525
                      +in(i+-3,j+8) * 0.0002314814814814815
                      +in(i+-3,j+9) * 0.00018155410312273057
                      +in(i+-2,j+-9) * -0.00018155410312273057
                      +in(i+-2,j+-8) * -0.0002314814814814815
                      +in(i+-2,j+-7) * -0.00030525030525030525
                      +in(i+-2,j+-6) * -0.00042087542087542086
                      +in(i+-2,j+-5) * -0.0006172839506172839
                      +in(i+-2,j+-4) * -0.000992063492063492
                      +in(i+-2,j+-3) * -0.001851851851851852
                      +in(i+-2,j+-2) * -0.013888888888888888
                      +in(i+-2,j+-1) * -0.004629629629629629
                      +in(i+-2,j+0) * -0.004629629629629629
                      +in(i+-2,j+1) * -0.004629629629629629
                      +in(i+-2,j+3) * 0.001851851851851852
                      +in(i+-2,j+4) * 0.000992063492063492
                      +in(i+-2,j+5) * 0.0006172839506172839
                      +in(i+-2,j+6) * 0.00042087542087542086
                      +in(i+-2,j+7) * 0.00030525030525030525
                      +in(i+-2,j+8) * 0.0002314814814814815
                      +in(i+-2,j+9) * 0.00018155410312273057
                      +in(i+-1,j+-9) * -0.00018155410312273057
                      +in(i+-1,j+-8) * -0.0002314814814814815
                      +in(i+-1,j+-7) * -0.00030525030525030525
                      +in(i+-1,j+-6) * -0.00042087542087542086
                      +in(i+-1,j+-5) * -0.0006172839506172839
                      +in(i+-1,j+-4) * -0.000992063492063492
                      +in(i+-1,j+-3) * -0.001851851851851852
                      +in(i+-1,j+-2) * -0.004629629629629629
                      +in(i+-1,j+-1) * -0.027777777777777776
                      +in(i+-1,j+0) * -0.027777777777777776
                      +in(i+-1,j+2) * 0.004629629629629629
                      +in(i+-1,j+3) * 0.001851851851851852
                      +in(i+-1,j+4) * 0.000992063492063492
                      +in(i+-1,j+5) * 0.0006172839506172839
                      +in(i+-1,j+6) * 0.00042087542087542086
                      +in(i+-1,j+7) * 0.00030525030525030525
                      +in(i+-1,j+8) * 0.0002314814814814815
                      +in(i+-1,j+9) * 0.00018155410312273057
                      +in(i+0,j+-9) * -0.00018155410312273057
                      +in(i+0,j+-8) * -0.0002314814814814815
                      +in(i+0,j+-7) * -0.00030525030525030525
                      +in(i+0,j+-6) * -0.00042087542087542086
                      +in(i+0,j+-5) * -0.0006172839506172839
                      +in(i+0,j+-4) * -0.000992063492063492
                      +in(i+0,j+-3) * -0.001851851851851852
                      +in(i+0,j+-2) * -0.004629629629629629
                      +in(i+0,j+-1) * -0.027777777777777776
                      +in(i+0,j+1) * 0.027777777777777776
                      +in(i+0,j+2) * 0.004629629629629629
                      +in(i+0,j+3) * 0.001851851851851852
                      +in(i+0,j+4) * 0.000992063492063492
                      +in(i+0,j+5) * 0.0006172839506172839
                      +in(i+0,j+6) * 0.00042087542087542086
                      +in(i+0,j+7) * 0.00030525030525030525
                      +in(i+0,j+8) * 0.0002314814814814815
                      +in(i+0,j+9) * 0.00018155410312273057
                      +in(i+1,j+-9) * -0.00018155410312273057
                      +in(i+1,j+-8) * -0.0002314814814814815
                      +in(i+1,j+-7) * -0.00030525030525030525
                      +in(i+1,j+-6) * -0.00042087542087542086
                      +in(i+1,j+-5) * -0.0006172839506172839
                      +in(i+1,j+-4) * -0.000992063492063492
                      +in(i+1,j+-3) * -0.001851851851851852
                      +in(i+1,j+-2) * -0.004629629629629629
                      +in(i+1,j+0) * 0.027777777777777776
                      +in(i+1,j+1) * 0.027777777777777776
                      +in(i+1,j+2) * 0.004629629629629629
                      +in(i+1,j+3) * 0.001851851851851852
                      +in(i+1,j+4) * 0.000992063492063492
                      +in(i+1,j+5) * 0.0006172839506172839
                      +in(i+1,j+6) * 0.00042087542087542086
                      +in(i+1,j+7) * 0.00030525030525030525
                      +in(i+1,j+8) * 0.0002314814814814815
                      +in(i+1,j+9) * 0.00018155410312273057
                      +in(i+2,j+-9) * -0.00018155410312273057
                      +in(i+2,j+-8) * -0.0002314814814814815
                      +in(i+2,j+-7) * -0.00030525030525030525
                      +in(i+2,j+-6) * -0.00042087542087542086
                      +in(i+2,j+-5) * -0.0006172839506172839
                      +in(i+2,j+-4) * -0.000992063492063492
                      +in(i+2,j+-3) * -0.001851851851851852
                      +in(i+2,j+-1) * 0.004629629629629629
                      +in(i+2,j+0) * 0.004629629629629629
                      +in(i+2,j+1) * 0.004629629629629629
                      +in(i+2,j+2) * 0.013888888888888888
                      +in(i+2,j+3) * 0.001851851851851852
                      +in(i+2,j+4) * 0.000992063492063492
                      +in(i+2,j+5) * 0.0006172839506172839
                      +in(i+2,j+6) * 0.00042087542087542086
                      +in(i+2,j+7) * 0.00030525030525030525
                      +in(i+2,j+8) * 0.0002314814814814815
                      +in(i+2,j+9) * 0.00018155410312273057
                      +in(i+3,j+-9) * -0.00018155410312273057
                      +in(i+3,j+-8) * -0.0002314814814814815
                      +in(i+3,j+-7) * -0.00030525030525030525
                      +in(i+3,j+-6) * -0.00042087542087542086
                      +in(i+3,j+-5) * -0.0006172839506172839
                      +in(i+3,j+-4) * -0.000992063492063492
                      +in(i+3,j+-2) * 0.001851851851851852
                      +in(i+3,j+-1) * 0.001851851851851852
                      +in(i+3,j+0) * 0.001851851851851852
                      +in(i+3,j+1) * 0.001851851851851852
                      +in(i+3,j+2) * 0.001851851851851852
                      +in(i+3,j+3) * 0.009259259259259259
                      +in(i+3,j+4) * 0.000992063492063492
                      +in(i+3,j+5) * 0.0006172839506172839
                      +in(i+3,j+6) * 0.00042087542087542086
                      +in(i+3,j+7) * 0.00030525030525030525
                      +in(i+3,j+8) * 0.0002314814814814815
                      +in(i+3,j+9) * 0.00018155410312273057
                      +in(i+4,j+-9) * -0.00018155410312273057
                      +in(i+4,j+-8) * -0.0002314814814814815
                      +in(i+4,j+-7) * -0.00030525030525030525
                      +in(i+4,j+-6) * -0.00042087542087542086
                      +in(i+4,j+-5) * -0.0006172839506172839
                      +in(i+4,j+-3) * 0.000992063492063492
                      +in(i+4,j+-2) * 0.000992063492063492
                      +in(i+4,j+-1) * 0.000992063492063492
                      +in(i+4,j+0) * 0.000992063492063492
                      +in(i+4,j+1) * 0.000992063492063492
                      +in(i+4,j+2) * 0.000992063492063492
                      +in(i+4,j+3) * 0.000992063492063492
                      +in(i+4,j+4) * 0.006944444444444444
                      +in(i+4,j+5) * 0.0006172839506172839
                      +in(i+4,j+6) * 0.00042087542087542086
                      +in(i+4,j+7) * 0.00030525030525030525
                      +in(i+4,j+8) * 0.0002314814814814815
                      +in(i+4,j+9) * 0.00018155410312273057
                      +in(i+5,j+-9) * -0.00018155410312273057
                      +in(i+5,j+-8) * -0.0002314814814814815
                      +in(i+5,j+-7) * -0.00030525030525030525
                      +in(i+5,j+-6) * -0.00042087542087542086
                      +in(i+5,j+-4) * 0.0006172839506172839
                      +in(i+5,j+-3) * 0.0006172839506172839
                      +in(i+5,j+-2) * 0.0006172839506172839
                      +in(i+5,j+-1) * 0.0006172839506172839
                      +in(i+5,j+0) * 0.0006172839506172839
                      +in(i+5,j+1) * 0.0006172839506172839
                      +in(i+5,j+2) * 0.0006172839506172839
                      +in(i+5,j+3) * 0.0006172839506172839
                      +in(i+5,j+4) * 0.0006172839506172839
                      +in(i+5,j+5) * 0.005555555555555556
                      +in(i+5,j+6) * 0.00042087542087542086
                      +in(i+5,j+7) * 0.00030525030525030525
                      +in(i+5,j+8) * 0.0002314814814814815
                      +in(i+5,j+9) * 0.00018155410312273057
                      +in(i+6,j+-9) * -0.00018155410312273057
                      +in(i+6,j+-8) * -0.0002314814814814815
                      +in(i+6,j+-7) * -0.00030525030525030525
                      +in(i+6,j+-5) * 0.00042087542087542086
                      +in(i+6,j+-4) * 0.00042087542087542086
                      +in(i+6,j+-3) * 0.00042087542087542086
                      +in(i+6,j+-2) * 0.00042087542087542086
                      +in(i+6,j+-1) * 0.00042087542087542086
                      +in(i+6,j+0) * 0.00042087542087542086
                      +in(i+6,j+1) * 0.00042087542087542086
                      +in(i+6,j+2) * 0.00042087542087542086
                      +in(i+6,j+3) * 0.00042087542087542086
                      +in(i+6,j+4) * 0.00042087542087542086
                      +in(i+6,j+5) * 0.00042087542087542086
                      +in(i+6,j+6) * 0.004629629629629629
                      +in(i+6,j+7) * 0.00030525030525030525
                      +in(i+6,j+8) * 0.0002314814814814815
                      +in(i+6,j+9) * 0.00018155410312273057
                      +in(i+7,j+-9) * -0.00018155410312273057
                      +in(i+7,j+-8) * -0.0002314814814814815
                      +in(i+7,j+-6) * 0.00030525030525030525
                      +in(i+7,j+-5) * 0.00030525030525030525
                      +in(i+7,j+-4) * 0.00030525030525030525
                      +in(i+7,j+-3) * 0.00030525030525030525
                      +in(i+7,j+-2) * 0.00030525030525030525
                      +in(i+7,j+-1) * 0.00030525030525030525
                      +in(i+7,j+0) * 0.00030525030525030525
                      +in(i+7,j+1) * 0.00030525030525030525
                      +in(i+7,j+2) * 0.00030525030525030525
                      +in(i+7,j+3) * 0.00030525030525030525
                      +in(i+7,j+4) * 0.00030525030525030525
                      +in(i+7,j+5) * 0.00030525030525030525
                      +in(i+7,j+6) * 0.00030525030525030525
                      +in(i+7,j+7) * 0.003968253968253968
                      +in(i+7,j+8) * 0.0002314814814814815
                      +in(i+7,j+9) * 0.00018155410312273057
                      +in(i+8,j+-9) * -0.00018155410312273057
                      +in(i+8,j+-7) * 0.0002314814814814815
                      +in(i+8,j+-6) * 0.0002314814814814815
                      +in(i+8,j+-5) * 0.0002314814814814815
                      +in(i+8,j+-4) * 0.0002314814814814815
                      +in(i+8,j+-3) * 0.0002314814814814815
                      +in(i+8,j+-2) * 0.0002314814814814815
                      +in(i+8,j+-1) * 0.0002314814814814815
                      +in(i+8,j+0) * 0.0002314814814814815
                      +in(i+8,j+1) * 0.0002314814814814815
                      +in(i+8,j+2) * 0.0002314814814814815
                      +in(i+8,j+3) * 0.0002314814814814815
                      +in(i+8,j+4) * 0.0002314814814814815
                      +in(i+8,j+5) * 0.0002314814814814815
                      +in(i+8,j+6) * 0.0002314814814814815
                      +in(i+8,j+7) * 0.0002314814814814815
                      +in(i+8,j+8) * 0.003472222222222222
                      +in(i+8,j+9) * 0.00018155410312273057
                      +in(i+9,j+-8) * 0.00018155410312273057
                      +in(i+9,j+-7) * 0.00018155410312273057
                      +in(i+9,j+-6) * 0.00018155410312273057
                      +in(i+9,j+-5) * 0.00018155410312273057
                      +in(i+9,j+-4) * 0.00018155410312273057
                      +in(i+9,j+-3) * 0.00018155410312273057
                      +in(i+9,j+-2) * 0.00018155410312273057
                      +in(i+9,j+-1) * 0.00018155410312273057
                      +in(i+9,j+0) * 0.00018155410312273057
                      +in(i+9,j+1) * 0.00018155410312273057
                      +in(i+9,j+2) * 0.00018155410312273057
                      +in(i+9,j+3) * 0.00018155410312273057
                      +in(i+9,j+4) * 0.00018155410312273057
                      +in(i+9,j+5) * 0.00018155410312273057
                      +in(i+9,j+6) * 0.00018155410312273057
                      +in(i+9,j+7) * 0.00018155410312273057
                      +in(i+9,j+8) * 0.00018155410312273057
                      +in(i+9,j+9) * 0.0030864197530864196
                      ;
       }
     });
}

