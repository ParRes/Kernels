#
# This file shows the NVHPC toolchain options.
NVHPC_PATH=${HOME}/NVIDIA/hpc_sdk/Linux_x86_64/2021
#
# Base compilers and language options
#
# C99 is required in some implementations.
CC=${NVHPC_PATH}/compilers/bin/nvc -c11
# All of the Fortran code is written for the 2008 standard and requires preprocessing.
FC=${NVHPC_PATH}/compilers/bin/nvfortran -acc -gpu=managed -cuda -cudalib -target=gpu -DNVHPC
# C++11 may not be required but does no harm here.
CXX=${NVHPC_PATH}/compilers/bin/nvc++ --c++17
#
# Compiler flags
#
DEFAULT_OPT_FLAGS=-O2
DEFAULT_OPT_FLAGS+=-Wall #-Werror
#
# OpenMP flags
#
OPENMPFLAG=-mp
#OPENMPFLAG+=-Minfo=mp,vect
OPENMPSIMDFLAG=
OFFLOADFLAG=-mp -target=gpu
#OFFLOADFLAG+=-Minfo=accel
OFFLOADFLAG+=-DGPU_SCHEDULE="schedule(static,1)"
OPENACCFLAG=-acc -target=gpu
OPENACCFLAG+=-Mlarge_arrays
STDPARFLAG=-stdpar -Minfo=accel
#
# OpenCL flags
#
OPENCLDIR=/usr/local/cuda-11.2/targets/x86_64-linux
OPENCLFLAG=-I${OPENCLDIR}/include -L${OPENCLDIR}/lib -lOpenCL
#OPENCLFLAG+=-Wno-ignored-attributes -Wno-deprecated-declarations
#OPENCLFLAG+=-Wno-deprecated-declarations -Wno-missing-braces
#
# Metal (MacOS-only, unused)
#
#METALFLAG=-framework MetalPerformanceShaders
#
# OCCA
#
#OCCADIR=${HOME}/prk-repo/Cxx11/occa
#
# SYCL flags
#
# Intel SYCL - https://github.com/intel/llvm/blob/sycl/sycl/doc/GetStartedWithSYCLCompiler.md
#
#SYCLDIR=/opt/isycl
#SYCLDIR=${HOME}/ISYCL/llvm/build
#SYCLCXX=${SYCLDIR}/bin/clang++
#SYCLFLAG=-g -std=c++17 -O3
#SYCLFLAG+=-fsycl -fsycl-unnamed-lambda -DDPCPP
#SYCLFLAG+=-L${SYCLDIR}/lib -lsycl -Wl,-rpath=${SYCLDIR}/lib
#SYCLFLAG+=-fsycl-targets=nvptx64-nvidia-cuda-sycldevice -DDPCPP_CUDA
###SYCLFLAG+=-Wno-unknown-cuda-version
#
# CodePlay ComputeCpp
#
#SYCLDIR=/opt/sycl/latest
#SYCLDIR=/opt/codeplay/latest
#SYCLCXX=${SYCLDIR}/bin/compute++
#SYCLFLAG=-sycl-driver -I$(SYCLDIR)/include -L$(SYCLDIR)/lib -Wl,-rpath=$(SYCLDIR)/lib -lComputeCpp
#SYCLFLAG+=-std=c++14 -O3
# This makes a huge difference in e.g. nstream...
#SYCLFLAG+=-no-serial-memop
# CentOS7 and Ubuntu14 built for this
#SYCLFLAG+=-D_GLIBCXX_USE_CXX11_ABI=0
# PRK header rejects GCC4
#SYCLFLAG+=--gcc-toolchain=/swtools/gcc/5.4.0
# If not found automatically
#SYCLFLAG+=${OPENCLFLAG}
# NVIDIA target
#SYCLFLAG+=-sycl-target ptx64
#SYCLFLAG+=-DPRK_NO_OPENCL_GPU
#
# hipSYCL
#
#SYCLDIR=/opt/hipsycl/usr/local # if installed with DESTDIR
#SYCLDIR=/opt/hipSYCL
#SYCLDIR=/opt/spack/spack/opt/spack/linux-ubuntu18.04-haswell/gcc-8.3.0/hipsycl-master-appurj662qod4y4z5zxipr2fwthl66k7
#SYCLCXX=${SYCLDIR}/bin/syclcc-clang
#SYCLFLAG=-std=c++17 -O3
#SYCLFLAG+=-DHIPSYCL
# CPU platform
#SYCLFLAG+=--hipsycl-platform=cpu
#SYCLFLAG+=--hipsycl-platform=cuda
#SYCLFLAG+=--hipsycl-gpu-arch=sm_60
#SYCLFLAG+=-Wl,-rpath=/opt/hipSYCL/llvm/lib # wrong?
#SYCLFLAG+=-Wl,-rpath=${SYCLDIR}/lib
#
#CELERITYDIR=${SYCLDIR}
#CELERITYINC=-I$(CELERITYDIR)/include/celerity -I$(CELERITYDIR)/include/celerity/vendor
#CELERITYLIB=-L$(CELERITYDIR)/lib -lcelerity_runtime
#
# OCCA
#
#OCCADIR=${HOME}/prk-repo/Cxx11/occa
#
# TBB
#
TBBDIR=
TBBFLAG=-I${TBBDIR}/include -L${TBBDIR}/lib -ltbb
#
# Parallel STL, Boost, etc.
#
BOOSTFLAG=-I/usr/local/Cellar/boost/1.69.0_2/include
RANGEFLAG=-DUSE_BOOST_IRANGE ${BOOSTFLAG}
#RANGEFLAG=-DUSE_RANGES_TS -I./range-v3/include
PSTLFLAG=${OPENMPSIMDFLAG} ${TBBFLAG} -I./pstl/include ${RANGEFLAG}
KOKKOSDIR=
KOKKOSFLAG=-I${KOKKOSDIR}/include -L${KOKKOSDIR}/lib -lkokkos ${OPENMPFLAG}
RAJADIR=
RAJAFLAG=-I${RAJADIR}/include -L${RAJADIR}/lib -lRAJA ${OPENMPFLAG} ${TBBFLAG}
THRUSTDIR=/opt/nvidia/thrust
THRUSTFLAG=-I${THRUSTDIR} ${RANGEFLAG}
#
# CBLAS for C++ DGEMM
#
BLASFLAG=
CBLASFLAG=
#
# CUDA flags
#
# Linux w/ NVIDIA CUDA
# Use appropriate arch or code is compiled to ancient features.
NVCC=${NVHPC_PATH}/compilers/bin/nvcc
CUDAFLAGS=-g -O3 -std=c++11
CUDAFLAGS+=--gpu-architecture=sm_70
#CUDAFLAGS+=--compiler-bindir=/swtools/gcc/7.5.0/bin
#CUDAFLAGS+=-forward-unknown-to-host-compiler -fopenmp
CUDAFLAGS+=-rdc=true # FIXES ptxas fatal   : Unresolved extern function 'cudaCGGetIntrinsicHandle'
# https://github.com/tensorflow/tensorflow/issues/1066#issuecomment-200574233
# heavy hammer:
CUDAFLAGS+=-D_X86INTRIN_H_INCLUDED
# big hammers:
#CUDAFLAGS+=-D_IMMINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_FMA4INTRIN_H_INCLUDED
#CUDAFLAGS+=-D_XOPMMINTRIN_H_INCLUDED
# many tiny hammers:
#CUDAFLAGS+=-D_MWAITXINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512FINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512VLINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512BWINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512DQINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512VLBWINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512VBMIVLINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512VBMIINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512VLDQINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512CDINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512PFINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512IFMAINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512IFMAVLINTRIN_H_INCLUDED
#CUDAFLAGS+=-D_AVX512ERINTRIN_H_INCLUDED
#
# MPI-3
#
# mpiicc wraps icc.  mpicc and mpigcc wrap gcc.
MPIDIR=${NVHPC_PATH}/comm_libs/openmpi/openmpi-3.1.5
MPICC=${MPIDIR}/bin/mpicc
MPICXX=${MPIDIR}/bin/mpicxx
MPIINC=-I${MPIDIR}/include
MPILIB=-L${MPIDIR}/lib -lmpi
#MPILIB=-L/usr/local/opt/libevent/lib -L${MPIDIR}/lib -lmpi
#MPIINC=-I/usr/include/mpich-3.2-x86_64
#MPILIB=-L/usr/lib64/mpich-3.2/lib -lmpi
#
# Global Arrays
#
GADIR=../deps/ga
GAFLAG=-I${GADIR}/include
GAFLAG+=-L${GADIR}/lib -lga
GAFLAG+=-L${GADIR}/../armci-mpi/lib -larmci # ARMCI-MPI
#GAFLAG+=-L${GADIR}/lib -larmci -lcomex     # ARMCI/ComEx
GAFLAG+=${MPIINC} ${MPILIB}
GAFLAG+=-lmpifort -lmpi
GAFLAG+=-i8 # GA is compiled with -i8 on 64-bit systems
#
# PETSc
#
PETSCDIR=../deps/petsc
PETSCFLAG=-I${PETSCDIR}/include
PETSCFLAG+=-L${PETSCDIR}/lib -lpetsc
PETSCFLAG+=-Wl,-rpath=${PETSCDIR}/lib
#
# Fortran 2008 coarrays
#
# see https://github.com/ParRes/Kernels/blob/master/FORTRAN/README.md for details
# single-node
#COARRAYFLAG=-fcoarray=single -lcaf_single
# multi-node
# COARRAYFLAG=-fcoarray=lib -lcaf_mpi

