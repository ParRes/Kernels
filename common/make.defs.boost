#
# This file shows the GCC toolchain options for PRKs using
# OpenMP, MPI and/or Fortran coarrays only.
#
# Base compilers and language options
#
VERSION=-9
# C99 is required in some implementations.
CC=gcc${VERSION} -std=c11 -pthread
#EXTRA_CLIBS=-lrt
# All of the Fortran code is written for the 2008 standard and requires preprocessing.
FC=gfortran${VERSION} -std=f2008 -cpp
# C++11 may not be required but does no harm here.
#CXX=g++${VERSION} -std=gnu++17 -pthread
CXX=clang++ -std=gnu++17 -pthread
#
# Compiler flags
#
# -mtune=native is appropriate for most cases.
# -march=native is appropriate if you want portable binaries.
DEFAULT_OPT_FLAGS=-O3 -mtune=native -ffast-math
#DEFAULT_OPT_FLAGS=-O0
DEFAULT_OPT_FLAGS+=-g3
#DEFAULT_OPT_FLAGS+=-fsanitize=undefined
#DEFAULT_OPT_FLAGS+=-fsanitize=undefined,leak
#DEFAULT_OPT_FLAGS+=-fsanitize=address
#DEFAULT_OPT_FLAGS+=-fsanitize=thread
# If you are compiling for KNL on a Xeon login node, use the following:
# DEFAULT_OPT_FLAGS=-g -O3 -march=knl
# See https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html for details.
#
#DEFAULT_OPT_FLAGS+=-fopt-info-vec-missed
DEFAULT_OPT_FLAGS+=-Wall #-Werror
DEFAULT_OPT_FLAGS+=-Wno-ignored-attributes -Wno-deprecated-declarations
#DEFAULT_OPT_FLAGS+=-mavx -mfma
#
# OpenMP flags
#
OPENMPFLAG=-fopenmp
OPENMPSIMDFLAG=-fopenmp-simd
OFFLOADFLAG=-foffload="-O3 -v"
OPENACCFLAG=-fopenacc
#
# OpenCL flags
#
# MacOS
#OPENCLFLAG=-framework OpenCL
# POCL
# http://portablecl.org/docs/html/using.html#linking-your-program-directly-with-pocl is not correct...
OPENCLFLAG=-I/opt/pocl/include -I/opt/pocl/share/pocl/include -L/opt/pocl/lib -Wl,-rpath -Wl,/opt/pocl/lib -lpocl
# Linux
#OPENCLDIR=/etc/alternatives/opencl-intel-tools
#OPENCLFLAG=-I${OPENCLDIR} -L${OPENCLDIR}/lib64 -lOpenCL
OPENCLFLAG+=-Wno-ignored-attributes -Wno-deprecated-declarations
METALFLAG=-framework MetalPerformanceShaders
#
# OCCA
#
#OCCADIR=${HOME}/prk-repo/Cxx11/occa
#
# Cilk
#
#CILKFLAG=-fcilkplus
#
# TBB
#
TBBDIR=/usr/local/Cellar/tbb/2019_U5_1
TBBFLAG=-I${TBBDIR}/include -L${TBBDIR}/lib -ltbb
#
# Parallel STL, Boost, etc.
#
#BOOSTFLAG=-I/usr/local/Cellar/boost/1.71.0/include
BOOSTROOT=/Users/jrhammon/Work/Languages/boost/libs
BOOSTFLAG=
BOOSTFLAG+=-I${BOOSTROOT}/circular_buffer/include
BOOSTFLAG+=-I${BOOSTROOT}/compute/include
BOOSTFLAG+=-I${BOOSTROOT}/algorithm/include
BOOSTFLAG+=-I${BOOSTROOT}/config/include
BOOSTFLAG+=-I${BOOSTROOT}/core/include
BOOSTFLAG+=-I${BOOSTROOT}/log/include
BOOSTFLAG+=-I${BOOSTROOT}/array/include
BOOSTFLAG+=-I${BOOSTROOT}/multi_array/include
BOOSTFLAG+=-I${BOOSTROOT}/optional/include
BOOSTFLAG+=-I${BOOSTROOT}/preprocessor/include
BOOSTFLAG+=-I${BOOSTROOT}/type_index/include
BOOSTFLAG+=-I${BOOSTROOT}/utility/include
BOOSTFLAG+=-I${BOOSTROOT}/assert/include
BOOSTFLAG+=-I${BOOSTROOT}/static_assert/include
BOOSTFLAG+=-I${BOOSTROOT}/exception/include
BOOSTFLAG+=-I${BOOSTROOT}/throw_exception/include
BOOSTFLAG+=-I${BOOSTROOT}/concept_check/include
BOOSTFLAG+=-I${BOOSTROOT}/type_traits/include
BOOSTFLAG+=-I${BOOSTROOT}/iterator/include
BOOSTFLAG+=-I${BOOSTROOT}/mpl/include
BOOSTFLAG+=-I${BOOSTROOT}/detail/include
BOOSTFLAG+=-I${BOOSTROOT}/functional/include
BOOSTFLAG+=-I${BOOSTROOT}/move/include
BOOSTFLAG+=-I${BOOSTROOT}/range/include
BOOSTFLAG+=-I${BOOSTROOT}/function/include
BOOSTFLAG+=-I${BOOSTROOT}/integer/include
BOOSTFLAG+=-I${BOOSTROOT}/container_hash/include
BOOSTFLAG+=-I${BOOSTROOT}/bind/include
BOOSTFLAG+=-I${BOOSTROOT}/chrono/include
BOOSTFLAG+=-I${BOOSTROOT}/predef/include
BOOSTFLAG+=-I${BOOSTROOT}/ratio/include
BOOSTFLAG+=-I${BOOSTROOT}/function_types/include
BOOSTFLAG+=-I${BOOSTROOT}/tuple/include
BOOSTFLAG+=-I${BOOSTROOT}/lexical_cast/include
BOOSTFLAG+=-I${BOOSTROOT}/numeric/conversion/include
BOOSTFLAG+=-I${BOOSTROOT}/container/include
BOOSTFLAG+=-I${BOOSTROOT}/math/include
BOOSTFLAG+=-I${BOOSTROOT}/fusion/include
BOOSTFLAG+=-I${BOOSTROOT}/typeof/include
BOOSTFLAG+=-I${BOOSTROOT}/uuid/include
BOOSTFLAG+=-I${BOOSTROOT}/smart_ptr/include
BOOSTFLAG+=-I${BOOSTROOT}/proto/include
BOOSTFLAG+=-DBOOST_COMPUTE_USE_CPP11
RANGEFLAG=-DUSE_BOOST_IRANGE ${BOOSTFLAG}
##RANGEFLAG=-DUSE_RANGES_TS -I./range-v3/include
PSTLFLAG=${OPENMPSIMDFLAG} ${TBBFLAG} ${RANGEFLAG}
KOKKOSDIR=/opt/kokkos/gcc
KOKKOSFLAG=-I${KOKKOSDIR}/include -L${KOKKOSDIR}/lib -lkokkos ${OPENMPFLAG}
RAJADIR=/opt/raja/gcc
RAJAFLAG=-I${RAJADIR}/include -L${RAJADIR}/lib -lRAJA ${OPENMPFLAG} ${TBBFLAG}
THRUSTDIR=/Users/jrhammon/Work/NVIDIA/thrust
THRUSTFLAG=-I${THRUSTDIR} ${RANGEFLAG}
#
# SYCL flags
#
# triSYCL
# https://github.com/triSYCL/triSYCL is header-only so just clone in Cxx11 directory...
SYCLDIR=./triSYCL
SYCLCXX=${CXX} -O3 -Wall -std=c++17 ${OPENMPFLAG}
SYCLFLAG=-I${SYCLDIR}/include ${BOOSTFLAG} -DTRISYCL
# ProGTX
# https://github.com/ProGTX/sycl-gtx
#SYCLDIR=${HOME}/Work/OpenCL/sycl-gtx
#SYCLCXX=${CXX} ${OPENMPFLAG}
#SYCLFLAG=-I${SYCLDIR}/sycl-gtx/include -L${SYCLDIR}/build/sycl-gtx -lsycl-gtx ${OPENCLFLAG}
SYCLFLAG+=${RANGEFLAG}
#
# CBLAS for C++ DGEMM
#
BLASFLAG=-DACCELERATE -framework Accelerate
CBLASFLAG=-DACCELERATE -framework Accelerate -flax-vector-conversions
#
# CUDA flags
#
# Mac w/ CUDA emulation via https://github.com/hughperkins/coriander
NVCC=/opt/llvm/cocl/bin/cocl
# Linux w/ NVIDIA CUDA
#NVCC=nvcc
#CUDAFLAGS=-g -O3 -std=c++11 -arch=sm_50
# https://github.com/tensorflow/tensorflow/issues/1066#issuecomment-200574233
#CUDAFLAGS+=-D_MWAITXINTRIN_H_INCLUDED
#
# Halide
#
HALIDECXX=c++
HALIDEDIR=/opt/halide
HALIDEFLAG=-I${HALIDEDIR}/include
HALIDEFLAG+=-L${HALIDEDIR}/lib -lhalide
#HALIDEFLAG+=-D_GLIBCXX_USE_CXX11_ABI=0
HALIDEFLAG+=${DEFAULT_OPT_FLAGS}
HALIDEFLAG+=-std=c++17 -g3
#
# ISPC
#
ISPC=ispc
ISPCFLAG=-O3 --target=host --opt=fast-math
#
# MPI
#
# We assume you have installed an implementation of MPI-3 that is in your path.
MPICC=mpicc -std=c99
#
# Fortran 2008 coarrays
#
# see https://github.com/ParRes/Kernels/blob/master/FORTRAN/README.md for details
# single-node
COARRAYFLAG=-fcoarray=single -lcaf_single
# multi-node
# COARRAYFLAG=-fcoarray=lib -lcaf_mpi

MEMKINDDIR=/home/parallels/PRK/deps
MEMKINDFLAGS=-I${MEMKINDDIR}/include -L${MEMKINDDIR}/lib -lmemkind -Wl,-rpath=${MEMKINDDIR}/lib
