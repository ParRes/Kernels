#
# This file shows the LLVM toolchain options for PRKs using
# OpenMP, MPI and/or Fortran coarrays only.
#
# Base compilers and language options
#
LLVM_ROOT=/usr/local/Cellar/llvm/5.0.0
LLVM_PATH=${LLVM_ROOT}/bin/
#LLVM_PATH=/opt/llvm/HEAD/bin/
# C99 is required in some implementations.
CC=${LLVM_PATH}clang -std=c11 -pthread
# All of the Fortran code is written for the 2008 standard and requires preprocessing.
FC=/opt/llvm/pgi-flang/bin/flang -Mpreprocess -Mfreeform -L/opt/llvm/pgi-flang/lib -Wl,-rpath=/opt/llvm/pgi-flang/lib
# C++11 may not be required but does no harm here.
CXX=${LLVM_PATH}clang++ -std=c++1z -pthread
#
# Compiler flags
#
# -mtune=native is appropriate for most cases.
# -march=native is appropriate if you want portable binaries.
#
DEFAULT_OPT_FLAGS=-g -O3 -mtune=native -ffast-math
#DEFAULT_OPT_FLAGS+=-mllvm -polly -mllvm -polly-vectorizer=stripmine
#
# If you want to be specific, get the architecture options from:
#   ${LLVM_PATH}llc --version
# and then get the CPU/ISA options from (e.g. for x86-64):
#   ${LLVM_PATH}llc -march=x86-64 -mcpu=help
#
# These are useful to understand why the compiler does not vectorize loops:
#   DEFAULT_OPT_FLAGS+=-Rpass-analysis=loop-vectorize
#   DEFAULT_OPT_FLAGS+=-Rpass=loop-vectorize
#
# OpenMP flags
#
OPENMPFLAG=-fopenmp
OFFLOADFLAG=-fopenmp
ORNLACCFLAG= # Flang does not support OpenACC
# Klondike weirdness
# OPENMPFLAG+=-L/opt/intel/compilers_and_libraries_2018.0.082/linux/compiler/lib/intel64_lin -liomp5
# Mac weirdness
OPENMPFLAG+=-L${LLVM_ROOT}/lib
# LLVM
# OPENMPFLAG+=-L/opt/llvm/4.0.0/lib -lomp
#
# OpenCL flags
#
# MacOS
OPENCLFLAG=-framework OpenCL
# POCL
# http://portablecl.org/docs/html/using.html#linking-your-program-directly-with-pocl is not correct...
#OPENCLFLAG=-I/opt/pocl/latest/include -L/opt/pocl/latest/lib -lpoclu -I/opt/pocl/latest/share/pocl/include -lOpenCL
# Linux
#OPENCLDIR=/etc/alternatives/opencl-intel-tools
#OPENCLFLAG=-I${OPENCLDIR} -L${OPENCLDIR}/lib64 -lOpenCL
#
# SYCL flags
#
# CodePlay ComputeCpp
SYCLDIR=/opt/sycl/latest
SYCLCXX=${SYCLDIR}/bin/compute++
SYCLFLAG=-DUSE_SYCL -sycl-driver -I$(SYCLDIR)/include -L$(SYCLDIR)/lib -Wl,-rpath=$(SYCLDIR)/lib -lComputeCpp
SYCLFLAG+=-std=c++14
# This makes a huge difference in e.g. nstream...
#SYCLFLAG+=-no-serial-memop
# CentOS7 and Ubuntu14 built for this
#SYCLFLAG+=-D_GLIBCXX_USE_CXX11_ABI=0
# PRK header rejects GCC4
#SYCLFLAG+=--gcc-toolchain=/swtools/gcc/5.4.0
# If not found automatically
#SYCLFLAG+=${OPENCLFLAG}
# NVIDIA target
#SYCLFLAG+=-sycl-target ptx64
#
# triSYCL
# https://github.com/triSYCL/triSYCL is header-only so just clone in Cxx11 directory...
#SYCLDIR=./triSYCL
#SYCLCXX=${CXX} ${OPENMPFLAG}
#SYCLFLAG=-DUSE_SYCL -I$(SYCLDIR)/include
# ProGTX
# https://github.com/ProGTX/sycl-gtx
SYCLDIR=${HOME}/Work/OpenCL/sycl-gtx
SYCLCXX=${CXX} ${OPENMPFLAG}
SYCLFLAG=-DUSE_SYCL -I${SYCLDIR}/sycl-gtx/include -L${SYCLDIR}/build/sycl-gtx -lsycl-gtx ${OPENCLFLAG}
#
# OCCA
OCCADIR=${HOME}/prk-repo/Cxx11/occa
#
# TBB
#
TBBDIR=/usr/local/Cellar/tbb/2018_U1
TBBFLAG=-DUSE_TBB -I${TBBDIR}/include -L${TBBDIR}/lib -ltbb
#
# Parallel STL, Boost, etc.
#
BOOSTFLAG=-DUSE_BOOST -DUSE_BOOST_COMPUTE -I/usr/local/Cellar/boost/1.65.1/include
PSTLFLAG=-DUSE_PSTL ${OPENMPFLAG} ${TBBFLAG} -DUSE_INTEL_PSTL -I./pstl/include
KOKKOSDIR=/opt/kokkos/clang
KOKKOSFLAG=-DUSE_KOKKOS -I${KOKKOSDIR}/include -L${KOKKOSDIR}/lib -lkokkos ${OPENMPFLAG} -ldl
RAJADIR=/opt/raja/clang
RAJAFLAG=-DUSE_RAJA -I${RAJADIR}/include -L${RAJADIR}/lib -lRAJA ${OPENMPFLAG} ${TBBFLAG}
#
# CBLAS for C++ DGEMM
#
CBLASFLAG=-DACCELERATE -framework Accelerate
#
# CUDA flags
#
# Mac w/ CUDA emulation via https://github.com/hughperkins/coriander
NVCC=/opt/llvm/cocl/bin/cocl
# Linux w/ NVIDIA CUDA
#NVCC=nvcc
CUDAFLAGS=-g -O3 -std=c++11
# https://github.com/tensorflow/tensorflow/issues/1066#issuecomment-200574233
CUDAFLAGS+=-D_MWAITXINTRIN_H_INCLUDED
#
# ISPC
#
ISPC=ispc
ISPCFLAG=-O3 --target=host --opt=fast-math
#
# MPI
#
# We assume you have installed an implementation of MPI-3 that is in your path.
MPICC=mpicc
