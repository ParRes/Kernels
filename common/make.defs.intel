#
# This file shows the Intel toolchain options for PRKs using
# OpenMP, MPI and/or Fortran coarrays only.
#
# Base compilers and language options
#
# We assume you have Intel MPI and have setup your environment with e.g.
# .  /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64
# in your .bashrc.
#
# C99 is required in some implementations.
CC=icc -std=c11 -pthread
#EXTRA_CLIBS=-lrt
# All of the Fortran code is written for the 2008 standard and requires preprocessing.
FC=ifort -std08 -fpp -qopt-matmul
# C++11 may not be required but does no harm here.
CXX=icpc -std=c++17 -pthread
#
# Compiler flags
#
# -xHOST is appropriate for most cases.
DEFAULT_OPT_FLAGS=-g -O3 -xHOST
#
# If you are compiling for KNL on a Xeon login node, use the following:
# DEFAULT_OPT_FLAGS=-g -O3 -xMIC-AVX512
#
#DEFAULT_OPT_FLAGS+=-qopt-report=5
#
# OpenMP flags
#
OPENMPFLAG=-qopenmp
OPENMPSIMDFLAG=-qopenmp-simd
OFFLOADFLAG=-qopenmp-offload=host
OFFLOADFLAG+=-DGPU_SCHEDULE=""
#
# OpenCL flags
#
# MacOS
#OPENCLFLAG=-framework OpenCL
# POCL
# http://portablecl.org/docs/html/using.html#linking-your-program-directly-with-pocl is not correct...
#OPENCLFLAG=-I/opt/pocl/latest/include -L/opt/pocl/latest/lib -lpoclu -I/opt/pocl/latest/share/pocl/include -lOpenCL
# Linux
OPENCLDIR=/etc/alternatives/opencl-intel-tools
OPENCLFLAG=-I${OPENCLDIR} -L${OPENCLDIR}/lib64 -lOpenCL
#
# SYCL flags
#
# Intel SYCL - https://github.com/intel/llvm/blob/sycl/sycl/doc/GetStartedWithSYCLCompiler.md
#
#SYCLDIR=/opt/isycl
#SYCLCXX=${SYCLDIR}/bin/clang++
#SYCLFLAG=-std=c++17 -O3
#SYCLFLAG+=-fsycl
#SYCLFLAG+=-L${SYCLDIR}/lib -lsycl -Wl,-rpath=${SYCLDIR}/lib
#
# Intel oneAPI
#
#SYCLCXX=dpcpp
#SYCLFLAG=-fsycl
#SYCLFLAG+=-std=c++17 -O3
#SYCLFLAG+=--gcc-toolchain=/opt/rh/devtoolset-7/root/usr
#SYCLFLAG+=-D_GLIBCXX_USE_CXX11_ABI=1
#SYCLFLAG+=-stdlib=c++
#
# CodePlay ComputeCpp
#
#SYCLDIR=/opt/sycl/latest
#SYCLDIR=/opt/codeplay/latest
#SYCLCXX=${SYCLDIR}/bin/compute++
#SYCLFLAG=-sycl-driver -I$(SYCLDIR)/include -L$(SYCLDIR)/lib -Wl,-rpath=$(SYCLDIR)/lib -lComputeCpp
#SYCLFLAG+=-std=c++14 -O3
# This makes a huge difference in e.g. nstream...
#SYCLFLAG+=-no-serial-memop
# CentOS7 and Ubuntu14 built for this
#SYCLFLAG+=-D_GLIBCXX_USE_CXX11_ABI=0
# PRK header rejects GCC4
#SYCLFLAG+=--gcc-toolchain=/swtools/gcc/5.4.0
# If not found automatically
#SYCLFLAG+=${OPENCLFLAG}
# NVIDIA target
#SYCLFLAG+=-sycl-target ptx64
#SYCLFLAG+=-DPRK_NO_OPENCL_GPU
#
# triSYCL
#
# https://github.com/triSYCL/triSYCL is header-only so just clone in Cxx11 directory...
SYCLDIR=./triSYCL
SYCLCXX=${CXX} ${OPENMPFLAG}
SYCLFLAG=-std=gnu++14 -I$(SYCLDIR)/include
#
# hipSYCL
#
#SYCLDIR=/opt/hipSYCL
#SYCLCXX=${SYCLDIR}/bin/syclcc-clang
#SYCLFLAG=-std=c++17 -O3
#SYCLFLAG+=-DHIPSYCL
# CPU platform
#SYCLFLAG+=--hipsycl-platform=cpu
#SYCLFLAG+=-Wl,-rpath=/opt/hipSYCL/llvm/lib
#
#CELERITYDIR=${SYCLDIR}
#CELERITYINC=-I$(CELERITYDIR)/include/celerity -I$(CELERITYDIR)/include/celerity/vendor
#CELERITYLIB=-L$(CELERITYDIR)/lib -lcelerity_runtime
#
# OCCA
#
#OCCADIR=${HOME}/prk-repo/Cxx11/occa
#
# Cilk
#
CILKFLAG=-intel-extensions # default
#
# TBB
#
TBBFLAG=-tbb
#TBBFLAG=-tbb_preview -DTBB_PREVIEW_FLOW_GRAPH_TRACE
#
# Parallel STL, Boost, etc.
#
BOOSTFLAG=-I/usr/local/Cellar/boost/1.65.1/include
RANGEFLAG=-DUSE_BOOST_IRANGE ${BOOSTFLAG}
#RANGEFLAG=-DUSE_RANGES_TS -I./range-v3/include
PSTLFLAG=${OPENMPSIMDFLAG} ${TBBFLAG} ${RANGEFLAG}
KOKKOSDIR=/opt/kokkos/intel
KOKKOSFLAG=-I${KOKKOSDIR}/include -L${KOKKOSDIR}/lib -lkokkos ${OPENMPFLAG} -ldl
RAJADIR=/opt/raja/intel
RAJAFLAG=-I${RAJADIR}/include -L${RAJADIR}/lib -lRAJA ${OPENMPFLAG} ${TBBFLAG}
THRUSTDIR=/opt/nvidia/thrust
THRUSTFLAG=-I${THRUSTDIR} ${RANGEFLAG}
#
# CBLAS for C++ DGEMM
#
#CBLASFLAG=-DACCELERATE -framework Accelerate -flax-vector-conversions
BLASFLAG=-mkl
CBLASFLAG=-DMKL -mkl
ONEMKLFLAG=-I$(MKLROOT)/include -DMKL_ILP64 ${MKLROOT}/lib/intel64/libmkl_sycl.a  -L${MKLROOT}/lib/intel64 -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core -lOpenCL -ldl
#
# CUDA flags
#
# Mac w/ CUDA emulation via https://github.com/hughperkins/coriander
#NVCC=/opt/llvm/cocl/bin/cocl
# Linux w/ NVIDIA CUDA
NVCC=nvcc
CUDAFLAGS=-g -O3 -std=c++11
CUDAFLAGS+=-arch=sm_50
# https://github.com/tensorflow/tensorflow/issues/1066#issuecomment-200574233
CUDAFLAGS+=-D_MWAITXINTRIN_H_INCLUDED
#
# ISPC
#
ISPC=ispc
ISPCFLAG=-O3 --target=host --opt=fast-math
#
# MPI-3
#
# We assume you have Intel MPI and have setup your environment with e.g.
# . /opt/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh
# in your .bashrc.
#
# mpiicc wraps icc.  mpicc and mpigcc wrap gcc.
MPIDIR=/opt/intel/inteloneapi/mpi/2021.1-beta06
MPICC=${MPIDIR}/bin/mpiicc
MPICXX=${MPIDIR}/bin/mpiicpc
MPIINC=-I${MPIDIR}/include
MPILIB=-L${MPIDIR}/lib -lmpi
#MPILIB=-L/usr/local/opt/libevent/lib -L${MPIDIR}/lib -lmpi
#MPIINC=-I/usr/include/mpich-3.2-x86_64
#MPILIB=-L/usr/lib64/mpich-3.2/lib -lmpi
#
# Global Arrays
#
GADIR=../deps/ga
GAFLAG=-I${GADIR}/include
GAFLAG+=-L${GADIR}/lib -lga
GAFLAG+=-L${GADIR}/../armci-mpi/lib -larmci # ARMCI-MPI
#GAFLAG+=-L${GADIR}/lib -larmci -lcomex     # ARMCI/ComEx
GAFLAG+=${MPIINC} ${MPILIB}
GAFLAG+=-lmpifort -lmpi
GAFLAG+=-i8 # GA is compiled with -i8 on 64-bit systems
#
# PETSc
#
PETSCDIR=../deps/petsc
PETSCFLAG=-I${PETSCDIR}/include
PETSCFLAG+=-L${PETSCDIR}/lib -lpetsc
PETSCFLAG+=-Wl,-rpath=${PETSCDIR}/lib
#
# Fortran 2008 coarrays
#
# see https://github.com/ParRes/Kernels/blob/master/FORTRAN/README.md for details
# single-node
COARRAYFLAG=-coarray
# multi-node
# COARRAYFLAG=-coarray=distributed
#
# MEMKIND (used in C1z)
#
MEMKINDDIR=/home/parallels/PRK/deps
MEMKINDFLAGS=-I${MEMKINDDIR}/include -L${MEMKINDDIR}/lib -lmemkind -Wl,-rpath=${MEMKINDDIR}/lib
